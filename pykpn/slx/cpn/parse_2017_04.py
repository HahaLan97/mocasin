#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Mon Jun 12 15:16:08 2017 by generateDS.py version 2.26a.
#
# Command line options:
#   ('-o', 'cpn.py')
#
# Command line arguments:
#   CpnXmlFile.xsd
#
# Command line:
#   /net/home/cmenard/.local/bin/generateDS -o "cpn.py" CpnXmlFile.xsd
#
# Current working directory (os.getcwd()):
#   cpnxml_schema
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:

    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                return instring.encode(ExternalEncoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result

    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'utf-8'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace, pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name, pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name, base64.b64encode(self.value), self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0, optional=0):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class CpnXmlFile(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Template=None, PNprocess=None, PNchannel=None):
        self.original_tagname_ = None
        if Template is None:
            self.Template = []
        else:
            self.Template = Template
        if PNprocess is None:
            self.PNprocess = []
        else:
            self.PNprocess = PNprocess
        if PNchannel is None:
            self.PNchannel = []
        else:
            self.PNchannel = PNchannel
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CpnXmlFile)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CpnXmlFile.subclass:
            return CpnXmlFile.subclass(*args_, **kwargs_)
        else:
            return CpnXmlFile(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Template(self): return self.Template
    def set_Template(self, Template): self.Template = Template
    def add_Template(self, value): self.Template.append(value)
    def insert_Template_at(self, index, value): self.Template.insert(index, value)
    def replace_Template_at(self, index, value): self.Template[index] = value
    def get_PNprocess(self): return self.PNprocess
    def set_PNprocess(self, PNprocess): self.PNprocess = PNprocess
    def add_PNprocess(self, value): self.PNprocess.append(value)
    def insert_PNprocess_at(self, index, value): self.PNprocess.insert(index, value)
    def replace_PNprocess_at(self, index, value): self.PNprocess[index] = value
    def get_PNchannel(self): return self.PNchannel
    def set_PNchannel(self, PNchannel): self.PNchannel = PNchannel
    def add_PNchannel(self, value): self.PNchannel.append(value)
    def insert_PNchannel_at(self, index, value): self.PNchannel.insert(index, value)
    def replace_PNchannel_at(self, index, value): self.PNchannel[index] = value
    def hasContent_(self):
        if (
            self.Template or
            self.PNprocess or
            self.PNchannel
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='CpnXml:', name_='CpnXmlFile', namespacedef_='xmlns:CpnXml="mapsCpnGraph"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CpnXmlFile')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='CpnXml:', name_='CpnXmlFile', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='CpnXml:', name_='CpnXmlFile'):
        pass
    def exportChildren(self, outfile, level, namespace_='CpnXml:', name_='CpnXmlFile', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Template_ in self.Template:
            Template_.export(outfile, level, namespace_, name_='Template', pretty_print=pretty_print)
        for PNprocess_ in self.PNprocess:
            PNprocess_.export(outfile, level, namespace_, name_='PNprocess', pretty_print=pretty_print)
        for PNchannel_ in self.PNchannel:
            PNchannel_.export(outfile, level, namespace_, name_='PNchannel', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Template':
            obj_ = TemplateChoice.factory()
            obj_.build(child_)
            self.Template.append(obj_)
            obj_.original_tagname_ = 'Template'
        elif nodeName_ == 'PNprocess':
            obj_ = ProcessInst.factory()
            obj_.build(child_)
            self.PNprocess.append(obj_)
            obj_.original_tagname_ = 'PNprocess'
        elif nodeName_ == 'PNchannel':
            obj_ = Channel.factory()
            obj_.build(child_)
            self.PNchannel.append(obj_)
            obj_.original_tagname_ = 'PNchannel'
# end class CpnXmlFile


class ProcessInst(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Name=None, TemplateName=None, PNin=None, PNout=None, PNparam=None):
        self.original_tagname_ = None
        self.Name = Name
        self.TemplateName = TemplateName
        self.PNin = PNin
        self.PNout = PNout
        self.PNparam = PNparam
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProcessInst)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProcessInst.subclass:
            return ProcessInst.subclass(*args_, **kwargs_)
        else:
            return ProcessInst(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def get_TemplateName(self): return self.TemplateName
    def set_TemplateName(self, TemplateName): self.TemplateName = TemplateName
    def get_PNin(self): return self.PNin
    def set_PNin(self, PNin): self.PNin = PNin
    def get_PNout(self): return self.PNout
    def set_PNout(self, PNout): self.PNout = PNout
    def get_PNparam(self): return self.PNparam
    def set_PNparam(self, PNparam): self.PNparam = PNparam
    def hasContent_(self):
        if (
            self.Name is not None or
            self.TemplateName is not None or
            self.PNin is not None or
            self.PNout is not None or
            self.PNparam is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='CpnXml:', name_='ProcessInst', namespacedef_='xmlns:CpnXml="mapsCpnGraph"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ProcessInst')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='CpnXml:', name_='ProcessInst', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='CpnXml:', name_='ProcessInst'):
        pass
    def exportChildren(self, outfile, level, namespace_='CpnXml:', name_='ProcessInst', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sName>%s</%sName>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), namespace_, eol_))
        if self.TemplateName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTemplateName>%s</%sTemplateName>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TemplateName), input_name='TemplateName')), namespace_, eol_))
        if self.PNin is not None:
            self.PNin.export(outfile, level, namespace_, name_='PNin', pretty_print=pretty_print)
        if self.PNout is not None:
            self.PNout.export(outfile, level, namespace_, name_='PNout', pretty_print=pretty_print)
        if self.PNparam is not None:
            self.PNparam.export(outfile, level, namespace_, name_='PNparam', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
        elif nodeName_ == 'TemplateName':
            TemplateName_ = child_.text
            TemplateName_ = self.gds_validate_string(TemplateName_, node, 'TemplateName')
            self.TemplateName = TemplateName_
        elif nodeName_ == 'PNin':
            obj_ = ExprList.factory()
            obj_.build(child_)
            self.PNin = obj_
            obj_.original_tagname_ = 'PNin'
        elif nodeName_ == 'PNout':
            obj_ = ExprList.factory()
            obj_.build(child_)
            self.PNout = obj_
            obj_.original_tagname_ = 'PNout'
        elif nodeName_ == 'PNparam':
            obj_ = ExprList.factory()
            obj_.build(child_)
            self.PNparam = obj_
            obj_.original_tagname_ = 'PNparam'
# end class ProcessInst


class ChannelParamList(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Param=None):
        self.original_tagname_ = None
        if Param is None:
            self.Param = []
        else:
            self.Param = Param
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ChannelParamList)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ChannelParamList.subclass:
            return ChannelParamList.subclass(*args_, **kwargs_)
        else:
            return ChannelParamList(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Param(self): return self.Param
    def set_Param(self, Param): self.Param = Param
    def add_Param(self, value): self.Param.append(value)
    def insert_Param_at(self, index, value): self.Param.insert(index, value)
    def replace_Param_at(self, index, value): self.Param[index] = value
    def hasContent_(self):
        if (
            self.Param
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='CpnXml:', name_='ChannelParamList', namespacedef_='xmlns:CpnXml="mapsCpnGraph"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ChannelParamList')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='CpnXml:', name_='ChannelParamList', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='CpnXml:', name_='ChannelParamList'):
        pass
    def exportChildren(self, outfile, level, namespace_='CpnXml:', name_='ChannelParamList', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Param_ in self.Param:
            Param_.export(outfile, level, namespace_, name_='Param', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Param':
            obj_ = ChannelParam.factory()
            obj_.build(child_)
            self.Param.append(obj_)
            obj_.original_tagname_ = 'Param'
# end class ChannelParamList


class ParamList(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Decl=None):
        self.original_tagname_ = None
        if Decl is None:
            self.Decl = []
        else:
            self.Decl = Decl
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ParamList)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ParamList.subclass:
            return ParamList.subclass(*args_, **kwargs_)
        else:
            return ParamList(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Decl(self): return self.Decl
    def set_Decl(self, Decl): self.Decl = Decl
    def add_Decl(self, value): self.Decl.append(value)
    def insert_Decl_at(self, index, value): self.Decl.insert(index, value)
    def replace_Decl_at(self, index, value): self.Decl[index] = value
    def hasContent_(self):
        if (
            self.Decl
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='CpnXml:', name_='ParamList', namespacedef_='xmlns:CpnXml="mapsCpnGraph"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ParamList')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='CpnXml:', name_='ParamList', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='CpnXml:', name_='ParamList'):
        pass
    def exportChildren(self, outfile, level, namespace_='CpnXml:', name_='ParamList', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Decl_ in self.Decl:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDecl>%s</%sDecl>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(Decl_), input_name='Decl')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Decl':
            Decl_ = child_.text
            Decl_ = self.gds_validate_string(Decl_, node, 'Decl')
            self.Decl.append(Decl_)
# end class ParamList


class TemplateBase(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Name=None, PNin=None, PNout=None, PNparam=None, extensiontype_=None):
        self.original_tagname_ = None
        self.Name = Name
        self.PNin = PNin
        self.PNout = PNout
        self.PNparam = PNparam
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TemplateBase)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TemplateBase.subclass:
            return TemplateBase.subclass(*args_, **kwargs_)
        else:
            return TemplateBase(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def get_PNin(self): return self.PNin
    def set_PNin(self, PNin): self.PNin = PNin
    def get_PNout(self): return self.PNout
    def set_PNout(self, PNout): self.PNout = PNout
    def get_PNparam(self): return self.PNparam
    def set_PNparam(self, PNparam): self.PNparam = PNparam
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def hasContent_(self):
        if (
            self.Name is not None or
            self.PNin is not None or
            self.PNout is not None or
            self.PNparam is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='CpnXml:', name_='TemplateBase', namespacedef_='xmlns:CpnXml="mapsCpnGraph"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TemplateBase')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='CpnXml:', name_='TemplateBase', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='CpnXml:', name_='TemplateBase'):
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            outfile.write(' xsi:type="%s"' % self.extensiontype_)
        pass
    def exportChildren(self, outfile, level, namespace_='CpnXml:', name_='TemplateBase', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sName>%s</%sName>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), namespace_, eol_))
        if self.PNin is not None:
            self.PNin.export(outfile, level, namespace_, name_='PNin', pretty_print=pretty_print)
        if self.PNout is not None:
            self.PNout.export(outfile, level, namespace_, name_='PNout', pretty_print=pretty_print)
        if self.PNparam is not None:
            self.PNparam.export(outfile, level, namespace_, name_='PNparam', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
        elif nodeName_ == 'PNin':
            obj_ = ChannelParamList.factory()
            obj_.build(child_)
            self.PNin = obj_
            obj_.original_tagname_ = 'PNin'
        elif nodeName_ == 'PNout':
            obj_ = ChannelParamList.factory()
            obj_.build(child_)
            self.PNout = obj_
            obj_.original_tagname_ = 'PNout'
        elif nodeName_ == 'PNparam':
            obj_ = ParamList.factory()
            obj_.build(child_)
            self.PNparam = obj_
            obj_.original_tagname_ = 'PNparam'
# end class TemplateBase


class ExprList(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Expr=None):
        self.original_tagname_ = None
        if Expr is None:
            self.Expr = []
        else:
            self.Expr = Expr
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ExprList)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ExprList.subclass:
            return ExprList.subclass(*args_, **kwargs_)
        else:
            return ExprList(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Expr(self): return self.Expr
    def set_Expr(self, Expr): self.Expr = Expr
    def add_Expr(self, value): self.Expr.append(value)
    def insert_Expr_at(self, index, value): self.Expr.insert(index, value)
    def replace_Expr_at(self, index, value): self.Expr[index] = value
    def hasContent_(self):
        if (
            self.Expr
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='CpnXml:', name_='ExprList', namespacedef_='xmlns:CpnXml="mapsCpnGraph"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ExprList')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='CpnXml:', name_='ExprList', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='CpnXml:', name_='ExprList'):
        pass
    def exportChildren(self, outfile, level, namespace_='CpnXml:', name_='ExprList', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Expr_ in self.Expr:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExpr>%s</%sExpr>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(Expr_), input_name='Expr')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Expr':
            Expr_ = child_.text
            Expr_ = self.gds_validate_string(Expr_, node, 'Expr')
            self.Expr.append(Expr_)
# end class ExprList


class ChannelDeclBase(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Type=None, Name=None, ArraySuffix=None, EntrySizeHint=None, extensiontype_=None):
        self.original_tagname_ = None
        self.Type = Type
        self.Name = Name
        self.validate_ChannelName(self.Name)
        self.ArraySuffix = ArraySuffix
        self.EntrySizeHint = EntrySizeHint
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ChannelDeclBase)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ChannelDeclBase.subclass:
            return ChannelDeclBase.subclass(*args_, **kwargs_)
        else:
            return ChannelDeclBase(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def get_ArraySuffix(self): return self.ArraySuffix
    def set_ArraySuffix(self, ArraySuffix): self.ArraySuffix = ArraySuffix
    def get_EntrySizeHint(self): return self.EntrySizeHint
    def set_EntrySizeHint(self, EntrySizeHint): self.EntrySizeHint = EntrySizeHint
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def validate_ChannelName(self, value):
        # Validate type ChannelName, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            pass
    def hasContent_(self):
        if (
            self.Type is not None or
            self.Name is not None or
            self.ArraySuffix is not None or
            self.EntrySizeHint is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='CpnXml:', name_='ChannelDeclBase', namespacedef_='xmlns:CpnXml="mapsCpnGraph"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ChannelDeclBase')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='CpnXml:', name_='ChannelDeclBase', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='CpnXml:', name_='ChannelDeclBase'):
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            outfile.write(' xsi:type="%s"' % self.extensiontype_)
        pass
    def exportChildren(self, outfile, level, namespace_='CpnXml:', name_='ChannelDeclBase', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespace_, eol_))
        if self.Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sName>%s</%sName>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), namespace_, eol_))
        if self.ArraySuffix is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sArraySuffix>%s</%sArraySuffix>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ArraySuffix), input_name='ArraySuffix')), namespace_, eol_))
        if self.EntrySizeHint is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEntrySizeHint>%s</%sEntrySizeHint>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.EntrySizeHint), input_name='EntrySizeHint')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Type':
            Type_ = child_.text
            Type_ = self.gds_validate_string(Type_, node, 'Type')
            self.Type = Type_
        elif nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
            # validate type ChannelName
            self.validate_ChannelName(self.Name)
        elif nodeName_ == 'ArraySuffix':
            ArraySuffix_ = child_.text
            ArraySuffix_ = self.gds_validate_string(ArraySuffix_, node, 'ArraySuffix')
            self.ArraySuffix = ArraySuffix_
        elif nodeName_ == 'EntrySizeHint':
            EntrySizeHint_ = child_.text
            EntrySizeHint_ = self.gds_validate_string(EntrySizeHint_, node, 'EntrySizeHint')
            self.EntrySizeHint = EntrySizeHint_
# end class ChannelDeclBase


class TemplateChoice(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PNsdf=None, PNkpn=None):
        self.original_tagname_ = None
        self.PNsdf = PNsdf
        self.PNkpn = PNkpn
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TemplateChoice)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TemplateChoice.subclass:
            return TemplateChoice.subclass(*args_, **kwargs_)
        else:
            return TemplateChoice(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PNsdf(self): return self.PNsdf
    def set_PNsdf(self, PNsdf): self.PNsdf = PNsdf
    def get_PNkpn(self): return self.PNkpn
    def set_PNkpn(self, PNkpn): self.PNkpn = PNkpn
    def hasContent_(self):
        if (
            self.PNsdf is not None or
            self.PNkpn is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='CpnXml:', name_='TemplateChoice', namespacedef_='xmlns:CpnXml="mapsCpnGraph"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TemplateChoice')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='CpnXml:', name_='TemplateChoice', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='CpnXml:', name_='TemplateChoice'):
        pass
    def exportChildren(self, outfile, level, namespace_='CpnXml:', name_='TemplateChoice', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PNsdf is not None:
            self.PNsdf.export(outfile, level, namespace_, name_='PNsdf', pretty_print=pretty_print)
        if self.PNkpn is not None:
            self.PNkpn.export(outfile, level, namespace_, name_='PNkpn', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PNsdf':
            obj_ = TemplateSDF.factory()
            obj_.build(child_)
            self.PNsdf = obj_
            obj_.original_tagname_ = 'PNsdf'
        elif nodeName_ == 'PNkpn':
            obj_ = TemplateKPN.factory()
            obj_.build(child_)
            self.PNkpn = obj_
            obj_.original_tagname_ = 'PNkpn'
# end class TemplateChoice


class ChannelParam(ChannelDeclBase):
    subclass = None
    superclass = ChannelDeclBase
    def __init__(self, Type=None, Name=None, ArraySuffix=None, EntrySizeHint=None, AccessWidth=None):
        self.original_tagname_ = None
        super(ChannelParam, self).__init__(Type, Name, ArraySuffix, EntrySizeHint, )
        self.AccessWidth = AccessWidth
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ChannelParam)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ChannelParam.subclass:
            return ChannelParam.subclass(*args_, **kwargs_)
        else:
            return ChannelParam(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AccessWidth(self): return self.AccessWidth
    def set_AccessWidth(self, AccessWidth): self.AccessWidth = AccessWidth
    def hasContent_(self):
        if (
            self.AccessWidth is not None or
            super(ChannelParam, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='CpnXml:', name_='ChannelParam', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ChannelParam')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='CpnXml:', name_='ChannelParam', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='CpnXml:', name_='ChannelParam'):
        super(ChannelParam, self).exportAttributes(outfile, level, already_processed, namespace_, name_='ChannelParam')
    def exportChildren(self, outfile, level, namespace_='CpnXml:', name_='ChannelParam', fromsubclass_=False, pretty_print=True):
        super(ChannelParam, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AccessWidth is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAccessWidth>%s</%sAccessWidth>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AccessWidth), input_name='AccessWidth')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        super(ChannelParam, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AccessWidth':
            AccessWidth_ = child_.text
            AccessWidth_ = self.gds_validate_string(AccessWidth_, node, 'AccessWidth')
            self.AccessWidth = AccessWidth_
        super(ChannelParam, self).buildChildren(child_, node, nodeName_, True)
# end class ChannelParam


class TemplateKPN(TemplateBase):
    subclass = None
    superclass = TemplateBase
    def __init__(self, Name=None, PNin=None, PNout=None, PNparam=None):
        self.original_tagname_ = None
        super(TemplateKPN, self).__init__(Name, PNin, PNout, PNparam, )
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TemplateKPN)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TemplateKPN.subclass:
            return TemplateKPN.subclass(*args_, **kwargs_)
        else:
            return TemplateKPN(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (
            super(TemplateKPN, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='CpnXml:', name_='TemplateKPN', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TemplateKPN')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='CpnXml:', name_='TemplateKPN', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='CpnXml:', name_='TemplateKPN'):
        super(TemplateKPN, self).exportAttributes(outfile, level, already_processed, namespace_, name_='TemplateKPN')
    def exportChildren(self, outfile, level, namespace_='CpnXml:', name_='TemplateKPN', fromsubclass_=False, pretty_print=True):
        super(TemplateKPN, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        super(TemplateKPN, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        super(TemplateKPN, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class TemplateKPN


class TemplateSDF(TemplateBase):
    subclass = None
    superclass = TemplateBase
    def __init__(self, Name=None, PNin=None, PNout=None, PNparam=None):
        self.original_tagname_ = None
        super(TemplateSDF, self).__init__(Name, PNin, PNout, PNparam, )
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TemplateSDF)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TemplateSDF.subclass:
            return TemplateSDF.subclass(*args_, **kwargs_)
        else:
            return TemplateSDF(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (
            super(TemplateSDF, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='CpnXml:', name_='TemplateSDF', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TemplateSDF')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='CpnXml:', name_='TemplateSDF', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='CpnXml:', name_='TemplateSDF'):
        super(TemplateSDF, self).exportAttributes(outfile, level, already_processed, namespace_, name_='TemplateSDF')
    def exportChildren(self, outfile, level, namespace_='CpnXml:', name_='TemplateSDF', fromsubclass_=False, pretty_print=True):
        super(TemplateSDF, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        super(TemplateSDF, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        super(TemplateSDF, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class TemplateSDF


class Channel(ChannelDeclBase):
    subclass = None
    superclass = ChannelDeclBase
    def __init__(self, Type=None, Name=None, ArraySuffix=None, EntrySizeHint=None):
        self.original_tagname_ = None
        super(Channel, self).__init__(Type, Name, ArraySuffix, EntrySizeHint, )
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Channel)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Channel.subclass:
            return Channel.subclass(*args_, **kwargs_)
        else:
            return Channel(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (
            super(Channel, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='CpnXml:', name_='Channel', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Channel')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='CpnXml:', name_='Channel', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='CpnXml:', name_='Channel'):
        super(Channel, self).exportAttributes(outfile, level, already_processed, namespace_, name_='Channel')
    def exportChildren(self, outfile, level, namespace_='CpnXml:', name_='Channel', fromsubclass_=False, pretty_print=True):
        super(Channel, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        super(Channel, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        super(Channel, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class Channel


GDSClassesMapping = {
    'PNchannel': Channel,
    'PNin': ChannelParamList,
    'PNkpn': TemplateKPN,
    'PNout': ChannelParamList,
    'PNparam': ParamList,
    'PNprocess': ProcessInst,
    'PNsdf': TemplateSDF,
    'Param': ChannelParam,
    'Template': TemplateChoice,
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'CpnXmlFile'
        rootClass = CpnXmlFile
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='xmlns:CpnXml="mapsCpnGraph"',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'CpnXmlFile'
        rootClass = CpnXmlFile
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    if sys.version_info.major == 2:
        from StringIO import StringIO as IOBuffer
    else:
        from io import BytesIO as IOBuffer
    parser = None
    doc = parsexml_(IOBuffer(inString), parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'CpnXmlFile'
        rootClass = CpnXmlFile
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='xmlns:CpnXml="mapsCpnGraph"')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'CpnXmlFile'
        rootClass = CpnXmlFile
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from cpn import *\n\n')
        sys.stdout.write('import cpn as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "Channel",
    "ChannelDeclBase",
    "ChannelParam",
    "ChannelParamList",
    "CpnXmlFile",
    "ExprList",
    "ParamList",
    "ProcessInst",
    "TemplateBase",
    "TemplateChoice",
    "TemplateKPN",
    "TemplateSDF"
]
