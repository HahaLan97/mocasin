'''
Created on Apr 4, 2019

@author: teweleit
'''
import unittest
from pykpn.representations.permutations import *

class Permutation_Test(unittest.TestCase):
    
    def setUp(self):
        self.permutation = Permutation([[0,1,2],[4,5]])
        self.permutation_group = PermutationGroup([self.permutation])
        self.s4xs8 = ProductGroup([SymmetricGroupTranspositions(8), SymmetricGroupTranspositions(4)])
        self.s4xs8_double = DuplicateGroup(self.s4xs8)
        self.arch_group = ProductGroup( [self.s4xs8_double, TrivialGroup(3)])
        
        self.maxDiff = None
        pass
    
    def tearDown(self):
        pass
    
    def test_get_cycles(self):
        self.assertListEqual(self.permutation.get_cycles(), [[4,5],[0,1,2]], 'Error in get_cycles()')
        
    def test_point_orbit(self):
        self.assertEqual(self.permutation_group.point_orbit(5), frozenset({4,5}), 'Error in point_orbit()')

    def test_enumerate_orbits(self):
        self.assertEqual(self.permutation_group.enumerate_orbits(), [frozenset({0,1,2}), frozenset({3}), frozenset({4,5})], 'Error in enumerate_orbits()')
        
    def test_tuple_orbit(self):
        self.assertEqual(self.permutation_group.tuple_orbit([0,5]), frozenset({(1,4), (1,5), (0,5), (0,4), (2,5), (2,4)}), 'Error in tuple_orbit()')
    
    def test_generators(self):
        self.assertListEqual(self.s4xs8_double.generators(), [[[12, 13], [0, 1]], [[12, 14], [0, 2]], [[12, 15], [0, 3]], [[12, 16], [0, 4]], [[12, 17], [0, 5]], [[12, 18],
                                                [0, 6]], [[12, 19], [0, 7]], [[13, 14], [1, 2]], [[13, 15], [1, 3]], [[13, 16], [1, 4]], [[13, 17], [1, 5]], 
                                                [[13, 18], [1, 6]], [[13, 19], [1, 7]], [[14, 15], [2, 3]], [[14, 16], [2, 4]], [[14, 17], [2, 5]], [[14, 18], 
                                                [2, 6]], [[14, 19], [2, 7]], [[15, 16], [3, 4]], [[15, 17], [3, 5]], [[15, 18], [3, 6]], [[15, 19], [3, 7]], 
                                                [[16, 17], [4, 5]], [[16, 18], [4, 6]], [[16, 19], [4, 7]], [[17, 18], [5, 6]], [[17, 19], [5, 7]], [[18, 19], 
                                                [6, 7]], [[20, 21], [8, 9]], [[20, 22], [8, 10]], [[20, 23], [8, 11]], [[21, 22], [9, 10]], [[21, 23], [9, 11]], 
                                                [[22, 23], [10, 11]]], 'Error in generator()')
        
    def test_ProductGroup(self):
        self.assertEqual(self.arch_group, [[1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26],
                                        [2, 1, 0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 13, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], 
                                        [3, 1, 2, 0, 4, 5, 6, 7, 8, 9, 10, 11, 15, 13, 14, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], 
                                        [4, 1, 2, 3, 0, 5, 6, 7, 8, 9, 10, 11, 16, 13, 14, 15, 12, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], 
                                        [5, 1, 2, 3, 4, 0, 6, 7, 8, 9, 10, 11, 17, 13, 14, 15, 16, 12, 18, 19, 20, 21, 22, 23, 24, 25, 26], 
                                        [6, 1, 2, 3, 4, 5, 0, 7, 8, 9, 10, 11, 18, 13, 14, 15, 16, 17, 12, 19, 20, 21, 22, 23, 24, 25, 26], 
                                        [7, 1, 2, 3, 4, 5, 6, 0, 8, 9, 10, 11, 19, 13, 14, 15, 16, 17, 18, 12, 20, 21, 22, 23, 24, 25, 26], 
                                        [0, 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], 
                                        [0, 3, 2, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 14, 13, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], 
                                        [0, 4, 2, 3, 1, 5, 6, 7, 8, 9, 10, 11, 12, 16, 14, 15, 13, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], 
                                        [0, 5, 2, 3, 4, 1, 6, 7, 8, 9, 10, 11, 12, 17, 14, 15, 16, 13, 18, 19, 20, 21, 22, 23, 24, 25, 26], 
                                        [0, 6, 2, 3, 4, 5, 1, 7, 8, 9, 10, 11, 12, 18, 14, 15, 16, 17, 13, 19, 20, 21, 22, 23, 24, 25, 26], 
                                        [0, 7, 2, 3, 4, 5, 6, 1, 8, 9, 10, 11, 12, 19, 14, 15, 16, 17, 18, 13, 20, 21, 22, 23, 24, 25, 26], 
                                        [0, 1, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], 
                                        [0, 1, 4, 3, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 15, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], 
                                        [0, 1, 5, 3, 4, 2, 6, 7, 8, 9, 10, 11, 12, 13, 17, 15, 16, 14, 18, 19, 20, 21, 22, 23, 24, 25, 26], 
                                        [0, 1, 6, 3, 4, 5, 2, 7, 8, 9, 10, 11, 12, 13, 18, 15, 16, 17, 14, 19, 20, 21, 22, 23, 24, 25, 26], 
                                        [0, 1, 7, 3, 4, 5, 6, 2, 8, 9, 10, 11, 12, 13, 19, 15, 16, 17, 18, 14, 20, 21, 22, 23, 24, 25, 26], 
                                        [0, 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], 
                                        [0, 1, 2, 5, 4, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 16, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26], 
                                        [0, 1, 2, 6, 4, 5, 3, 7, 8, 9, 10, 11, 12, 13, 14, 18, 16, 17, 15, 19, 20, 21, 22, 23, 24, 25, 26], 
                                        [0, 1, 2, 7, 4, 5, 6, 3, 8, 9, 10, 11, 12, 13, 14, 19, 16, 17, 18, 15, 20, 21, 22, 23, 24, 25, 26], 
                                        [0, 1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26], 
                                        [0, 1, 2, 3, 6, 5, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 17, 16, 19, 20, 21, 22, 23, 24, 25, 26], 
                                        [0, 1, 2, 3, 7, 5, 6, 4, 8, 9, 10, 11, 12, 13, 14, 15, 19, 17, 18, 16, 20, 21, 22, 23, 24, 25, 26], 
                                        [0, 1, 2, 3, 4, 6, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 17, 19, 20, 21, 22, 23, 24, 25, 26], 
                                        [0, 1, 2, 3, 4, 7, 6, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 18, 17, 20, 21, 22, 23, 24, 25, 26], 
                                        [0, 1, 2, 3, 4, 5, 7, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 18, 20, 21, 22, 23, 24, 25, 26], 
                                        [0, 1, 2, 3, 4, 5, 6, 7, 9, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22, 23, 24, 25, 26], 
                                        [0, 1, 2, 3, 4, 5, 6, 7, 10, 9, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 21, 20, 23, 24, 25, 26], 
                                        [0, 1, 2, 3, 4, 5, 6, 7, 11, 9, 10, 8, 12, 13, 14, 15, 16, 17, 18, 19, 23, 21, 22, 20, 24, 25, 26], 
                                        [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 24, 25, 26], 
                                        [0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 10, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 22, 21, 24, 25, 26], 
                                        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 22, 24, 25, 26]],
                                        'Error in ProductGroup()')
if __name__ == "__main__":
    unittest.main()
    
    