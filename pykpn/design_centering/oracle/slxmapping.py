#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Thu Nov 26 17:22:55 2015 by generateDS.py version 2.17a.
#
# Command line options:
#   ('-o', 'slxmapping.py')
#   ('-s', 'slxmapping_subs.py')
#
# Command line arguments:
#   SlxMappingDescriptor.xsd
#
# Command line:
#   generateDS.py -o "slxmapping.py" -s "slxmapping_subs.py" SlxMappingDescriptor.xsd
#
# Current working directory (os.getcwd()):
#   generateds
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
from lxml import etree as etree_


Validate_simpletypes_ = True


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        parser = etree_.ETCompatXMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:

    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace, pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace, name, pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name, base64.b64encode(self.value), self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class SlxMappingDescriptor(GeneratedsSuper):
    """Platform-wide mapping descriptor for a given application. Contains a
    collection of individual scheduler descriptors. Each scheduler
    descriptor arbitrates a set of processes into a resource or
    several of them. The mapper describes which scheduler relate to
    which processor (or set of processors). Other information is
    also provided: channel bounds, platform utilization."""
    subclass = None
    superclass = None
    def __init__(self, Name=None, AppName=None, SingleSchedulerDesc=None, MapperDesc=None, AdditionalDesc=None):
        self.original_tagname_ = None
        self.Name = _cast(None, Name)
        self.AppName = _cast(None, AppName)
        if SingleSchedulerDesc is None:
            self.SingleSchedulerDesc = []
        else:
            self.SingleSchedulerDesc = SingleSchedulerDesc
        self.MapperDesc = MapperDesc
        self.AdditionalDesc = AdditionalDesc
    def factory(*args_, **kwargs_):
        if SlxMappingDescriptor.subclass:
            return SlxMappingDescriptor.subclass(*args_, **kwargs_)
        else:
            return SlxMappingDescriptor(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SingleSchedulerDesc(self): return self.SingleSchedulerDesc
    def set_SingleSchedulerDesc(self, SingleSchedulerDesc): self.SingleSchedulerDesc = SingleSchedulerDesc
    def add_SingleSchedulerDesc(self, value): self.SingleSchedulerDesc.append(value)
    def insert_SingleSchedulerDesc_at(self, index, value): self.SingleSchedulerDesc.insert(index, value)
    def replace_SingleSchedulerDesc_at(self, index, value): self.SingleSchedulerDesc[index] = value
    def get_MapperDesc(self): return self.MapperDesc
    def set_MapperDesc(self, MapperDesc): self.MapperDesc = MapperDesc
    def get_AdditionalDesc(self): return self.AdditionalDesc
    def set_AdditionalDesc(self, AdditionalDesc): self.AdditionalDesc = AdditionalDesc
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def get_AppName(self): return self.AppName
    def set_AppName(self, AppName): self.AppName = AppName
    def hasContent_(self):
        if (
            self.SingleSchedulerDesc or
            self.MapperDesc is not None or
            self.AdditionalDesc is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='slxMapping:', name_='SlxMappingDescriptor', namespacedef_='xmlns:slxMapping="slxMapping"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SlxMappingDescriptor')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='slxMapping:', name_='SlxMappingDescriptor', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='slxMapping:', name_='SlxMappingDescriptor'):
        if self.Name is not None and 'Name' not in already_processed:
            already_processed.add('Name')
            outfile.write(' Name=%s' % (self.gds_format_string(quote_attrib(self.Name).encode(ExternalEncoding), input_name='Name'), ))
        if self.AppName is not None and 'AppName' not in already_processed:
            already_processed.add('AppName')
            outfile.write(' AppName=%s' % (self.gds_format_string(quote_attrib(self.AppName).encode(ExternalEncoding), input_name='AppName'), ))
    def exportChildren(self, outfile, level, namespace_='slxMapping:', name_='SlxMappingDescriptor', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for SingleSchedulerDesc_ in self.SingleSchedulerDesc:
            SingleSchedulerDesc_.export(outfile, level, namespace_, name_='SingleSchedulerDesc', pretty_print=pretty_print)
        if self.MapperDesc is not None:
            self.MapperDesc.export(outfile, level, namespace_, name_='MapperDesc', pretty_print=pretty_print)
        if self.AdditionalDesc is not None:
            self.AdditionalDesc.export(outfile, level, namespace_, name_='AdditionalDesc', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Name', node)
        if value is not None and 'Name' not in already_processed:
            already_processed.add('Name')
            self.Name = value
        value = find_attr_value_('AppName', node)
        if value is not None and 'AppName' not in already_processed:
            already_processed.add('AppName')
            self.AppName = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SingleSchedulerDesc':
            obj_ = SingleSchedulerDesc.factory()
            obj_.build(child_)
            self.SingleSchedulerDesc.append(obj_)
            obj_.original_tagname_ = 'SingleSchedulerDesc'
        elif nodeName_ == 'MapperDesc':
            obj_ = MapperDesc.factory()
            obj_.build(child_)
            self.MapperDesc = obj_
            obj_.original_tagname_ = 'MapperDesc'
        elif nodeName_ == 'AdditionalDesc':
            obj_ = AdditionalDesc.factory()
            obj_.build(child_)
            self.AdditionalDesc = obj_
            obj_.original_tagname_ = 'AdditionalDesc'
# end class SlxMappingDescriptor


class SingleSchedulerDesc(GeneratedsSuper):
    """This part describes the scheduler. How it is driven (data, demand)
    and which policy it is used when a processor is shared by
    different processes (policy). It also describes the parameters
    of the scheduler, e.g. it is is priority-based a list of
    priorities is given."""
    subclass = None
    superclass = None
    def __init__(self, SchedulingPolicy=None, Name=None, ID=None, OutSchedulerInfo=None):
        self.original_tagname_ = None
        self.SchedulingPolicy = _cast(None, SchedulingPolicy)
        self.Name = _cast(None, Name)
        self.ID = _cast(int, ID)
        self.OutSchedulerInfo = OutSchedulerInfo
    def factory(*args_, **kwargs_):
        if SingleSchedulerDesc.subclass:
            return SingleSchedulerDesc.subclass(*args_, **kwargs_)
        else:
            return SingleSchedulerDesc(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_OutSchedulerInfo(self): return self.OutSchedulerInfo
    def set_OutSchedulerInfo(self, OutSchedulerInfo): self.OutSchedulerInfo = OutSchedulerInfo
    def get_SchedulingPolicy(self): return self.SchedulingPolicy
    def set_SchedulingPolicy(self, SchedulingPolicy): self.SchedulingPolicy = SchedulingPolicy
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def get_ID(self): return self.ID
    def set_ID(self, ID): self.ID = ID
    def hasContent_(self):
        if (
            self.OutSchedulerInfo is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='slxMapping:', name_='SingleSchedulerDesc', namespacedef_='xmlns:slxMapping="slxMapping"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SingleSchedulerDesc')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='slxMapping:', name_='SingleSchedulerDesc', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='slxMapping:', name_='SingleSchedulerDesc'):
        if self.SchedulingPolicy is not None and 'SchedulingPolicy' not in already_processed:
            already_processed.add('SchedulingPolicy')
            outfile.write(' SchedulingPolicy=%s' % (quote_attrib(self.SchedulingPolicy), ))
        if self.Name is not None and 'Name' not in already_processed:
            already_processed.add('Name')
            outfile.write(' Name=%s' % (self.gds_format_string(quote_attrib(self.Name).encode(ExternalEncoding), input_name='Name'), ))
        if self.ID is not None and 'ID' not in already_processed:
            already_processed.add('ID')
            outfile.write(' ID="%s"' % self.gds_format_integer(self.ID, input_name='ID'))
    def exportChildren(self, outfile, level, namespace_='slxMapping:', name_='SingleSchedulerDesc', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.OutSchedulerInfo is not None:
            self.OutSchedulerInfo.export(outfile, level, namespace_, name_='OutSchedulerInfo', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('SchedulingPolicy', node)
        if value is not None and 'SchedulingPolicy' not in already_processed:
            already_processed.add('SchedulingPolicy')
            self.SchedulingPolicy = value
        value = find_attr_value_('Name', node)
        if value is not None and 'Name' not in already_processed:
            already_processed.add('Name')
            self.Name = value
        value = find_attr_value_('ID', node)
        if value is not None and 'ID' not in already_processed:
            already_processed.add('ID')
            try:
                self.ID = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'OutSchedulerInfo':
            obj_ = OutSchedulerInfo.factory()
            obj_.build(child_)
            self.OutSchedulerInfo = obj_
            obj_.original_tagname_ = 'OutSchedulerInfo'
# end class SingleSchedulerDesc


class OutSchedulerInfo(GeneratedsSuper):
    """Contains information that is generally computed for the schedule,
    e.g. which are the priorities for the tasks it will schedule, or
    the time slot for a round-robin scheduler."""
    subclass = None
    superclass = None
    def __init__(self, TimeSlot=None, AttributedProcesses=None, IterationCounts=None):
        self.original_tagname_ = None
        self.TimeSlot = _cast(int, TimeSlot)
        self.AttributedProcesses = AttributedProcesses
        self.IterationCounts = IterationCounts
    def factory(*args_, **kwargs_):
        if OutSchedulerInfo.subclass:
            return OutSchedulerInfo.subclass(*args_, **kwargs_)
        else:
            return OutSchedulerInfo(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AttributedProcesses(self): return self.AttributedProcesses
    def set_AttributedProcesses(self, AttributedProcesses): self.AttributedProcesses = AttributedProcesses
    def get_IterationCounts(self): return self.IterationCounts
    def set_IterationCounts(self, IterationCounts): self.IterationCounts = IterationCounts
    def get_TimeSlot(self): return self.TimeSlot
    def set_TimeSlot(self, TimeSlot): self.TimeSlot = TimeSlot
    def hasContent_(self):
        if (
            self.AttributedProcesses is not None or
            self.IterationCounts is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='slxMapping:', name_='OutSchedulerInfo', namespacedef_='xmlns:slxMapping="slxMapping"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OutSchedulerInfo')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='slxMapping:', name_='OutSchedulerInfo', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='slxMapping:', name_='OutSchedulerInfo'):
        if self.TimeSlot is not None and 'TimeSlot' not in already_processed:
            already_processed.add('TimeSlot')
            outfile.write(' TimeSlot="%s"' % self.gds_format_integer(self.TimeSlot, input_name='TimeSlot'))
    def exportChildren(self, outfile, level, namespace_='slxMapping:', name_='OutSchedulerInfo', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AttributedProcesses is not None:
            self.AttributedProcesses.export(outfile, level, namespace_, name_='AttributedProcesses', pretty_print=pretty_print)
        if self.IterationCounts is not None:
            self.IterationCounts.export(outfile, level, namespace_, name_='IterationCounts', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('TimeSlot', node)
        if value is not None and 'TimeSlot' not in already_processed:
            already_processed.add('TimeSlot')
            try:
                self.TimeSlot = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AttributedProcesses':
            obj_ = AttributedProcesses.factory()
            obj_.build(child_)
            self.AttributedProcesses = obj_
            obj_.original_tagname_ = 'AttributedProcesses'
        elif nodeName_ == 'IterationCounts':
            obj_ = IterationCounts.factory()
            obj_.build(child_)
            self.IterationCounts = obj_
            obj_.original_tagname_ = 'IterationCounts'
# end class OutSchedulerInfo


class MapperDesc(GeneratedsSuper):
    """Define the mapper: one-to-one or one-to-many, dynamic o static."""
    subclass = None
    superclass = None
    def __init__(self, MappingType=None, Name=None, ID=None, OutMapperInfo=None):
        self.original_tagname_ = None
        self.MappingType = _cast(None, MappingType)
        self.Name = _cast(None, Name)
        self.ID = _cast(int, ID)
        self.OutMapperInfo = OutMapperInfo
    def factory(*args_, **kwargs_):
        if MapperDesc.subclass:
            return MapperDesc.subclass(*args_, **kwargs_)
        else:
            return MapperDesc(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_OutMapperInfo(self): return self.OutMapperInfo
    def set_OutMapperInfo(self, OutMapperInfo): self.OutMapperInfo = OutMapperInfo
    def get_MappingType(self): return self.MappingType
    def set_MappingType(self, MappingType): self.MappingType = MappingType
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def get_ID(self): return self.ID
    def set_ID(self, ID): self.ID = ID
    def hasContent_(self):
        if (
            self.OutMapperInfo is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='slxMapping:', name_='MapperDesc', namespacedef_='xmlns:slxMapping="slxMapping"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MapperDesc')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='slxMapping:', name_='MapperDesc', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='slxMapping:', name_='MapperDesc'):
        if self.MappingType is not None and 'MappingType' not in already_processed:
            already_processed.add('MappingType')
            outfile.write(' MappingType=%s' % (quote_attrib(self.MappingType), ))
        if self.Name is not None and 'Name' not in already_processed:
            already_processed.add('Name')
            outfile.write(' Name=%s' % (self.gds_format_string(quote_attrib(self.Name).encode(ExternalEncoding), input_name='Name'), ))
        if self.ID is not None and 'ID' not in already_processed:
            already_processed.add('ID')
            outfile.write(' ID="%s"' % self.gds_format_integer(self.ID, input_name='ID'))
    def exportChildren(self, outfile, level, namespace_='slxMapping:', name_='MapperDesc', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.OutMapperInfo is not None:
            self.OutMapperInfo.export(outfile, level, namespace_, name_='OutMapperInfo', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('MappingType', node)
        if value is not None and 'MappingType' not in already_processed:
            already_processed.add('MappingType')
            self.MappingType = value
        value = find_attr_value_('Name', node)
        if value is not None and 'Name' not in already_processed:
            already_processed.add('Name')
            self.Name = value
        value = find_attr_value_('ID', node)
        if value is not None and 'ID' not in already_processed:
            already_processed.add('ID')
            try:
                self.ID = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'OutMapperInfo':
            obj_ = OutMapperInfo.factory()
            obj_.build(child_)
            self.OutMapperInfo = obj_
            obj_.original_tagname_ = 'OutMapperInfo'
# end class MapperDesc


class OutMapperInfo(GeneratedsSuper):
    """Contains information that is generally computed for the mapper, e.g.
    which processes (schedulers) go to which (groups of) processing
    elements and which PN channels go to which communication
    channels."""
    subclass = None
    superclass = None
    def __init__(self, GroupID2PEIDs=None, Schedulers2Groups=None, ChannelMappings=None, MappingConstraints=None, ProcessPreferences=None):
        self.original_tagname_ = None
        self.GroupID2PEIDs = GroupID2PEIDs
        self.Schedulers2Groups = Schedulers2Groups
        self.ChannelMappings = ChannelMappings
        self.MappingConstraints = MappingConstraints
        self.ProcessPreferences = ProcessPreferences
    def factory(*args_, **kwargs_):
        if OutMapperInfo.subclass:
            return OutMapperInfo.subclass(*args_, **kwargs_)
        else:
            return OutMapperInfo(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_GroupID2PEIDs(self): return self.GroupID2PEIDs
    def set_GroupID2PEIDs(self, GroupID2PEIDs): self.GroupID2PEIDs = GroupID2PEIDs
    def get_Schedulers2Groups(self): return self.Schedulers2Groups
    def set_Schedulers2Groups(self, Schedulers2Groups): self.Schedulers2Groups = Schedulers2Groups
    def get_ChannelMappings(self): return self.ChannelMappings
    def set_ChannelMappings(self, ChannelMappings): self.ChannelMappings = ChannelMappings
    def get_MappingConstraints(self): return self.MappingConstraints
    def set_MappingConstraints(self, MappingConstraints): self.MappingConstraints = MappingConstraints
    def get_ProcessPreferences(self): return self.ProcessPreferences
    def set_ProcessPreferences(self, ProcessPreferences): self.ProcessPreferences = ProcessPreferences
    def hasContent_(self):
        if (
            self.GroupID2PEIDs is not None or
            self.Schedulers2Groups is not None or
            self.ChannelMappings is not None or
            self.MappingConstraints is not None or
            self.ProcessPreferences is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='slxMapping:', name_='OutMapperInfo', namespacedef_='xmlns:slxMapping="slxMapping"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OutMapperInfo')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='slxMapping:', name_='OutMapperInfo', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='slxMapping:', name_='OutMapperInfo'):
        pass
    def exportChildren(self, outfile, level, namespace_='slxMapping:', name_='OutMapperInfo', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.GroupID2PEIDs is not None:
            self.GroupID2PEIDs.export(outfile, level, namespace_, name_='GroupID2PEIDs', pretty_print=pretty_print)
        if self.Schedulers2Groups is not None:
            self.Schedulers2Groups.export(outfile, level, namespace_, name_='Schedulers2Groups', pretty_print=pretty_print)
        if self.ChannelMappings is not None:
            self.ChannelMappings.export(outfile, level, namespace_, name_='ChannelMappings', pretty_print=pretty_print)
        if self.MappingConstraints is not None:
            self.MappingConstraints.export(outfile, level, namespace_, name_='MappingConstraints', pretty_print=pretty_print)
        if self.ProcessPreferences is not None:
            self.ProcessPreferences.export(outfile, level, namespace_, name_='ProcessPreferences', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'GroupID2PEIDs':
            obj_ = GroupID2PEIDs.factory()
            obj_.build(child_)
            self.GroupID2PEIDs = obj_
            obj_.original_tagname_ = 'GroupID2PEIDs'
        elif nodeName_ == 'Schedulers2Groups':
            obj_ = Schedulers2Groups.factory()
            obj_.build(child_)
            self.Schedulers2Groups = obj_
            obj_.original_tagname_ = 'Schedulers2Groups'
        elif nodeName_ == 'ChannelMappings':
            obj_ = ChannelMappings.factory()
            obj_.build(child_)
            self.ChannelMappings = obj_
            obj_.original_tagname_ = 'ChannelMappings'
        elif nodeName_ == 'MappingConstraints':
            obj_ = MappingConstraints.factory()
            obj_.build(child_)
            self.MappingConstraints = obj_
            obj_.original_tagname_ = 'MappingConstraints'
        elif nodeName_ == 'ProcessPreferences':
            obj_ = ProcessPreferences.factory()
            obj_.build(child_)
            self.ProcessPreferences = obj_
            obj_.original_tagname_ = 'ProcessPreferences'
# end class OutMapperInfo


class AdditionalDesc(GeneratedsSuper):
    """Define additional scheduling related issues: kind of bounding in the
    channels and deadlock resolution policy"""
    subclass = None
    superclass = None
    def __init__(self, BoundInfo=None):
        self.original_tagname_ = None
        self.BoundInfo = BoundInfo
    def factory(*args_, **kwargs_):
        if AdditionalDesc.subclass:
            return AdditionalDesc.subclass(*args_, **kwargs_)
        else:
            return AdditionalDesc(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_BoundInfo(self): return self.BoundInfo
    def set_BoundInfo(self, BoundInfo): self.BoundInfo = BoundInfo
    def hasContent_(self):
        if (
            self.BoundInfo is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='slxMapping:', name_='AdditionalDesc', namespacedef_='xmlns:slxMapping="slxMapping"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AdditionalDesc')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='slxMapping:', name_='AdditionalDesc', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='slxMapping:', name_='AdditionalDesc'):
        pass
    def exportChildren(self, outfile, level, namespace_='slxMapping:', name_='AdditionalDesc', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BoundInfo is not None:
            self.BoundInfo.export(outfile, level, namespace_, name_='BoundInfo', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'BoundInfo':
            obj_ = BoundInfo.factory()
            obj_.build(child_)
            self.BoundInfo = obj_
            obj_.original_tagname_ = 'BoundInfo'
# end class AdditionalDesc


class BoundInfo(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, GlobalBound=None, BoundList=None):
        self.original_tagname_ = None
        self.GlobalBound = _cast(int, GlobalBound)
        self.BoundList = BoundList
    def factory(*args_, **kwargs_):
        if BoundInfo.subclass:
            return BoundInfo.subclass(*args_, **kwargs_)
        else:
            return BoundInfo(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_BoundList(self): return self.BoundList
    def set_BoundList(self, BoundList): self.BoundList = BoundList
    def get_GlobalBound(self): return self.GlobalBound
    def set_GlobalBound(self, GlobalBound): self.GlobalBound = GlobalBound
    def hasContent_(self):
        if (
            self.BoundList is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='slxMapping:', name_='BoundInfo', namespacedef_='xmlns:slxMapping="slxMapping"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='BoundInfo')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='slxMapping:', name_='BoundInfo', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='slxMapping:', name_='BoundInfo'):
        if self.GlobalBound is not None and 'GlobalBound' not in already_processed:
            already_processed.add('GlobalBound')
            outfile.write(' GlobalBound="%s"' % self.gds_format_integer(self.GlobalBound, input_name='GlobalBound'))
    def exportChildren(self, outfile, level, namespace_='slxMapping:', name_='BoundInfo', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BoundList is not None:
            self.BoundList.export(outfile, level, namespace_, name_='BoundList', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('GlobalBound', node)
        if value is not None and 'GlobalBound' not in already_processed:
            already_processed.add('GlobalBound')
            try:
                self.GlobalBound = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'BoundList':
            obj_ = BoundList.factory()
            obj_.build(child_)
            self.BoundList = obj_
            obj_.original_tagname_ = 'BoundList'
# end class BoundInfo


class AttributedProcesses(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Process=None):
        self.original_tagname_ = None
        if Process is None:
            self.Process = []
        else:
            self.Process = Process
    def factory(*args_, **kwargs_):
        if AttributedProcesses.subclass:
            return AttributedProcesses.subclass(*args_, **kwargs_)
        else:
            return AttributedProcesses(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Process(self): return self.Process
    def set_Process(self, Process): self.Process = Process
    def add_Process(self, value): self.Process.append(value)
    def insert_Process_at(self, index, value): self.Process.insert(index, value)
    def replace_Process_at(self, index, value): self.Process[index] = value
    def hasContent_(self):
        if (
            self.Process
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='slxMapping:', name_='AttributedProcesses', namespacedef_='xmlns:slxMapping="slxMapping"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AttributedProcesses')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='slxMapping:', name_='AttributedProcesses', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='slxMapping:', name_='AttributedProcesses'):
        pass
    def exportChildren(self, outfile, level, namespace_='slxMapping:', name_='AttributedProcesses', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Process_ in self.Process:
            Process_.export(outfile, level, namespace_, name_='Process', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Process':
            obj_ = ProcessAttribute.factory()
            obj_.build(child_)
            self.Process.append(obj_)
            obj_.original_tagname_ = 'Process'
# end class AttributedProcesses


class ProcessAttribute(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Attribute=None, Name=None):
        self.original_tagname_ = None
        self.Attribute = _cast(int, Attribute)
        self.Name = _cast(None, Name)
    def factory(*args_, **kwargs_):
        if ProcessAttribute.subclass:
            return ProcessAttribute.subclass(*args_, **kwargs_)
        else:
            return ProcessAttribute(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Attribute(self): return self.Attribute
    def set_Attribute(self, Attribute): self.Attribute = Attribute
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='slxMapping:', name_='ProcessAttribute', namespacedef_='xmlns:slxMapping="slxMapping"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ProcessAttribute')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='slxMapping:', name_='ProcessAttribute', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='slxMapping:', name_='ProcessAttribute'):
        if self.Attribute is not None and 'Attribute' not in already_processed:
            already_processed.add('Attribute')
            outfile.write(' Attribute="%s"' % self.gds_format_integer(self.Attribute, input_name='Attribute'))
        if self.Name is not None and 'Name' not in already_processed:
            already_processed.add('Name')
            outfile.write(' Name=%s' % (self.gds_format_string(quote_attrib(self.Name).encode(ExternalEncoding), input_name='Name'), ))
    def exportChildren(self, outfile, level, namespace_='slxMapping:', name_='ProcessAttribute', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Attribute', node)
        if value is not None and 'Attribute' not in already_processed:
            already_processed.add('Attribute')
            try:
                self.Attribute = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('Name', node)
        if value is not None and 'Name' not in already_processed:
            already_processed.add('Name')
            self.Name = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class ProcessAttribute


class GroupID2PEIDs(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PeGroup=None):
        self.original_tagname_ = None
        if PeGroup is None:
            self.PeGroup = []
        else:
            self.PeGroup = PeGroup
    def factory(*args_, **kwargs_):
        if GroupID2PEIDs.subclass:
            return GroupID2PEIDs.subclass(*args_, **kwargs_)
        else:
            return GroupID2PEIDs(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PeGroup(self): return self.PeGroup
    def set_PeGroup(self, PeGroup): self.PeGroup = PeGroup
    def add_PeGroup(self, value): self.PeGroup.append(value)
    def insert_PeGroup_at(self, index, value): self.PeGroup.insert(index, value)
    def replace_PeGroup_at(self, index, value): self.PeGroup[index] = value
    def hasContent_(self):
        if (
            self.PeGroup
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='slxMapping:', name_='GroupID2PEIDs', namespacedef_='xmlns:slxMapping="slxMapping"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='GroupID2PEIDs')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='slxMapping:', name_='GroupID2PEIDs', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='slxMapping:', name_='GroupID2PEIDs'):
        pass
    def exportChildren(self, outfile, level, namespace_='slxMapping:', name_='GroupID2PEIDs', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for PeGroup_ in self.PeGroup:
            PeGroup_.export(outfile, level, namespace_, name_='PeGroup', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PeGroup':
            obj_ = PeGroup.factory()
            obj_.build(child_)
            self.PeGroup.append(obj_)
            obj_.original_tagname_ = 'PeGroup'
# end class GroupID2PEIDs


class PeGroup(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, GroupId=None, Processors=None):
        self.original_tagname_ = None
        self.GroupId = _cast(int, GroupId)
        self.Processors = _cast(None, Processors)
    def factory(*args_, **kwargs_):
        if PeGroup.subclass:
            return PeGroup.subclass(*args_, **kwargs_)
        else:
            return PeGroup(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_GroupId(self): return self.GroupId
    def set_GroupId(self, GroupId): self.GroupId = GroupId
    def get_Processors(self): return self.Processors
    def set_Processors(self, Processors): self.Processors = Processors
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='slxMapping:', name_='PeGroup', namespacedef_='xmlns:slxMapping="slxMapping"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PeGroup')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='slxMapping:', name_='PeGroup', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='slxMapping:', name_='PeGroup'):
        if self.GroupId is not None and 'GroupId' not in already_processed:
            already_processed.add('GroupId')
            outfile.write(' GroupId="%s"' % self.gds_format_integer(self.GroupId, input_name='GroupId'))
        if self.Processors is not None and 'Processors' not in already_processed:
            already_processed.add('Processors')
            outfile.write(' Processors=%s' % (quote_attrib(self.Processors), ))
    def exportChildren(self, outfile, level, namespace_='slxMapping:', name_='PeGroup', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('GroupId', node)
        if value is not None and 'GroupId' not in already_processed:
            already_processed.add('GroupId')
            try:
                self.GroupId = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('Processors', node)
        if value is not None and 'Processors' not in already_processed:
            already_processed.add('Processors')
            self.Processors = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class PeGroup


class Schedulers2Groups(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Scheduler2Group=None):
        self.original_tagname_ = None
        if Scheduler2Group is None:
            self.Scheduler2Group = []
        else:
            self.Scheduler2Group = Scheduler2Group
    def factory(*args_, **kwargs_):
        if Schedulers2Groups.subclass:
            return Schedulers2Groups.subclass(*args_, **kwargs_)
        else:
            return Schedulers2Groups(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Scheduler2Group(self): return self.Scheduler2Group
    def set_Scheduler2Group(self, Scheduler2Group): self.Scheduler2Group = Scheduler2Group
    def add_Scheduler2Group(self, value): self.Scheduler2Group.append(value)
    def insert_Scheduler2Group_at(self, index, value): self.Scheduler2Group.insert(index, value)
    def replace_Scheduler2Group_at(self, index, value): self.Scheduler2Group[index] = value
    def hasContent_(self):
        if (
            self.Scheduler2Group
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='slxMapping:', name_='Schedulers2Groups', namespacedef_='xmlns:slxMapping="slxMapping"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Schedulers2Groups')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='slxMapping:', name_='Schedulers2Groups', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='slxMapping:', name_='Schedulers2Groups'):
        pass
    def exportChildren(self, outfile, level, namespace_='slxMapping:', name_='Schedulers2Groups', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Scheduler2Group_ in self.Scheduler2Group:
            Scheduler2Group_.export(outfile, level, namespace_, name_='Scheduler2Group', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Scheduler2Group':
            obj_ = Scheduler2Group.factory()
            obj_.build(child_)
            self.Scheduler2Group.append(obj_)
            obj_.original_tagname_ = 'Scheduler2Group'
# end class Schedulers2Groups


class Scheduler2Group(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, SchedulerID=None, GroupID=None):
        self.original_tagname_ = None
        self.SchedulerID = _cast(int, SchedulerID)
        self.GroupID = _cast(int, GroupID)
    def factory(*args_, **kwargs_):
        if Scheduler2Group.subclass:
            return Scheduler2Group.subclass(*args_, **kwargs_)
        else:
            return Scheduler2Group(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SchedulerID(self): return self.SchedulerID
    def set_SchedulerID(self, SchedulerID): self.SchedulerID = SchedulerID
    def get_GroupID(self): return self.GroupID
    def set_GroupID(self, GroupID): self.GroupID = GroupID
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='slxMapping:', name_='Scheduler2Group', namespacedef_='xmlns:slxMapping="slxMapping"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Scheduler2Group')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='slxMapping:', name_='Scheduler2Group', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='slxMapping:', name_='Scheduler2Group'):
        if self.SchedulerID is not None and 'SchedulerID' not in already_processed:
            already_processed.add('SchedulerID')
            outfile.write(' SchedulerID="%s"' % self.gds_format_integer(self.SchedulerID, input_name='SchedulerID'))
        if self.GroupID is not None and 'GroupID' not in already_processed:
            already_processed.add('GroupID')
            outfile.write(' GroupID="%s"' % self.gds_format_integer(self.GroupID, input_name='GroupID'))
    def exportChildren(self, outfile, level, namespace_='slxMapping:', name_='Scheduler2Group', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('SchedulerID', node)
        if value is not None and 'SchedulerID' not in already_processed:
            already_processed.add('SchedulerID')
            try:
                self.SchedulerID = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('GroupID', node)
        if value is not None and 'GroupID' not in already_processed:
            already_processed.add('GroupID')
            try:
                self.GroupID = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class Scheduler2Group


class IterationCounts(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, IterationCount=None):
        self.original_tagname_ = None
        if IterationCount is None:
            self.IterationCount = []
        else:
            self.IterationCount = IterationCount
    def factory(*args_, **kwargs_):
        if IterationCounts.subclass:
            return IterationCounts.subclass(*args_, **kwargs_)
        else:
            return IterationCounts(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_IterationCount(self): return self.IterationCount
    def set_IterationCount(self, IterationCount): self.IterationCount = IterationCount
    def add_IterationCount(self, value): self.IterationCount.append(value)
    def insert_IterationCount_at(self, index, value): self.IterationCount.insert(index, value)
    def replace_IterationCount_at(self, index, value): self.IterationCount[index] = value
    def hasContent_(self):
        if (
            self.IterationCount
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='slxMapping:', name_='IterationCounts', namespacedef_='xmlns:slxMapping="slxMapping"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='IterationCounts')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='slxMapping:', name_='IterationCounts', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='slxMapping:', name_='IterationCounts'):
        pass
    def exportChildren(self, outfile, level, namespace_='slxMapping:', name_='IterationCounts', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for IterationCount_ in self.IterationCount:
            IterationCount_.export(outfile, level, namespace_, name_='IterationCount', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'IterationCount':
            obj_ = IterationCount.factory()
            obj_.build(child_)
            self.IterationCount.append(obj_)
            obj_.original_tagname_ = 'IterationCount'
# end class IterationCounts


class IterationCount(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Process=None, Iterations=None):
        self.original_tagname_ = None
        self.Process = _cast(None, Process)
        self.Iterations = _cast(int, Iterations)
    def factory(*args_, **kwargs_):
        if IterationCount.subclass:
            return IterationCount.subclass(*args_, **kwargs_)
        else:
            return IterationCount(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Process(self): return self.Process
    def set_Process(self, Process): self.Process = Process
    def get_Iterations(self): return self.Iterations
    def set_Iterations(self, Iterations): self.Iterations = Iterations
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='slxMapping:', name_='IterationCount', namespacedef_='xmlns:slxMapping="slxMapping"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='IterationCount')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='slxMapping:', name_='IterationCount', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='slxMapping:', name_='IterationCount'):
        if self.Process is not None and 'Process' not in already_processed:
            already_processed.add('Process')
            outfile.write(' Process=%s' % (self.gds_format_string(quote_attrib(self.Process).encode(ExternalEncoding), input_name='Process'), ))
        if self.Iterations is not None and 'Iterations' not in already_processed:
            already_processed.add('Iterations')
            outfile.write(' Iterations="%s"' % self.gds_format_integer(self.Iterations, input_name='Iterations'))
    def exportChildren(self, outfile, level, namespace_='slxMapping:', name_='IterationCount', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Process', node)
        if value is not None and 'Process' not in already_processed:
            already_processed.add('Process')
            self.Process = value
        value = find_attr_value_('Iterations', node)
        if value is not None and 'Iterations' not in already_processed:
            already_processed.add('Iterations')
            try:
                self.Iterations = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class IterationCount


class ChannelMappings(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ChannelMapping=None):
        self.original_tagname_ = None
        if ChannelMapping is None:
            self.ChannelMapping = []
        else:
            self.ChannelMapping = ChannelMapping
    def factory(*args_, **kwargs_):
        if ChannelMappings.subclass:
            return ChannelMappings.subclass(*args_, **kwargs_)
        else:
            return ChannelMappings(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ChannelMapping(self): return self.ChannelMapping
    def set_ChannelMapping(self, ChannelMapping): self.ChannelMapping = ChannelMapping
    def add_ChannelMapping(self, value): self.ChannelMapping.append(value)
    def insert_ChannelMapping_at(self, index, value): self.ChannelMapping.insert(index, value)
    def replace_ChannelMapping_at(self, index, value): self.ChannelMapping[index] = value
    def hasContent_(self):
        if (
            self.ChannelMapping
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='slxMapping:', name_='ChannelMappings', namespacedef_='xmlns:slxMapping="slxMapping"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ChannelMappings')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='slxMapping:', name_='ChannelMappings', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='slxMapping:', name_='ChannelMappings'):
        pass
    def exportChildren(self, outfile, level, namespace_='slxMapping:', name_='ChannelMappings', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ChannelMapping_ in self.ChannelMapping:
            ChannelMapping_.export(outfile, level, namespace_, name_='ChannelMapping', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ChannelMapping':
            obj_ = ChannelMapping.factory()
            obj_.build(child_)
            self.ChannelMapping.append(obj_)
            obj_.original_tagname_ = 'ChannelMapping'
# end class ChannelMappings


class ChannelMapping(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ProcessFrom=None, PnChannel=None, ProcessTo=None, ProcessorFrom=None, CommPrimitive=None, Memory=None, ProcessorTo=None):
        self.original_tagname_ = None
        self.ProcessFrom = _cast(None, ProcessFrom)
        self.PnChannel = _cast(None, PnChannel)
        self.ProcessTo = _cast(None, ProcessTo)
        self.ProcessorFrom = _cast(None, ProcessorFrom)
        self.CommPrimitive = _cast(None, CommPrimitive)
        self.Memory = _cast(None, Memory)
        self.ProcessorTo = _cast(None, ProcessorTo)
    def factory(*args_, **kwargs_):
        if ChannelMapping.subclass:
            return ChannelMapping.subclass(*args_, **kwargs_)
        else:
            return ChannelMapping(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ProcessFrom(self): return self.ProcessFrom
    def set_ProcessFrom(self, ProcessFrom): self.ProcessFrom = ProcessFrom
    def get_PnChannel(self): return self.PnChannel
    def set_PnChannel(self, PnChannel): self.PnChannel = PnChannel
    def get_ProcessTo(self): return self.ProcessTo
    def set_ProcessTo(self, ProcessTo): self.ProcessTo = ProcessTo
    def get_ProcessorFrom(self): return self.ProcessorFrom
    def set_ProcessorFrom(self, ProcessorFrom): self.ProcessorFrom = ProcessorFrom
    def get_CommPrimitive(self): return self.CommPrimitive
    def set_CommPrimitive(self, CommPrimitive): self.CommPrimitive = CommPrimitive
    def get_Memory(self): return self.Memory
    def set_Memory(self, Memory): self.Memory = Memory
    def get_ProcessorTo(self): return self.ProcessorTo
    def set_ProcessorTo(self, ProcessorTo): self.ProcessorTo = ProcessorTo
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='slxMapping:', name_='ChannelMapping', namespacedef_='xmlns:slxMapping="slxMapping"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ChannelMapping')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='slxMapping:', name_='ChannelMapping', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='slxMapping:', name_='ChannelMapping'):
        if self.ProcessFrom is not None and 'ProcessFrom' not in already_processed:
            already_processed.add('ProcessFrom')
            outfile.write(' ProcessFrom=%s' % (self.gds_format_string(quote_attrib(self.ProcessFrom).encode(ExternalEncoding), input_name='ProcessFrom'), ))
        if self.PnChannel is not None and 'PnChannel' not in already_processed:
            already_processed.add('PnChannel')
            outfile.write(' PnChannel=%s' % (self.gds_format_string(quote_attrib(self.PnChannel).encode(ExternalEncoding), input_name='PnChannel'), ))
        if self.ProcessTo is not None and 'ProcessTo' not in already_processed:
            already_processed.add('ProcessTo')
            outfile.write(' ProcessTo=%s' % (self.gds_format_string(quote_attrib(self.ProcessTo).encode(ExternalEncoding), input_name='ProcessTo'), ))
        if self.ProcessorFrom is not None and 'ProcessorFrom' not in already_processed:
            already_processed.add('ProcessorFrom')
            outfile.write(' ProcessorFrom=%s' % (self.gds_format_string(quote_attrib(self.ProcessorFrom).encode(ExternalEncoding), input_name='ProcessorFrom'), ))
        if self.CommPrimitive is not None and 'CommPrimitive' not in already_processed:
            already_processed.add('CommPrimitive')
            outfile.write(' CommPrimitive=%s' % (self.gds_format_string(quote_attrib(self.CommPrimitive).encode(ExternalEncoding), input_name='CommPrimitive'), ))
        if self.Memory is not None and 'Memory' not in already_processed:
            already_processed.add('Memory')
            outfile.write(' Memory=%s' % (self.gds_format_string(quote_attrib(self.Memory).encode(ExternalEncoding), input_name='Memory'), ))
        if self.ProcessorTo is not None and 'ProcessorTo' not in already_processed:
            already_processed.add('ProcessorTo')
            outfile.write(' ProcessorTo=%s' % (self.gds_format_string(quote_attrib(self.ProcessorTo).encode(ExternalEncoding), input_name='ProcessorTo'), ))
    def exportChildren(self, outfile, level, namespace_='slxMapping:', name_='ChannelMapping', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('ProcessFrom', node)
        if value is not None and 'ProcessFrom' not in already_processed:
            already_processed.add('ProcessFrom')
            self.ProcessFrom = value
        value = find_attr_value_('PnChannel', node)
        if value is not None and 'PnChannel' not in already_processed:
            already_processed.add('PnChannel')
            self.PnChannel = value
        value = find_attr_value_('ProcessTo', node)
        if value is not None and 'ProcessTo' not in already_processed:
            already_processed.add('ProcessTo')
            self.ProcessTo = value
        value = find_attr_value_('ProcessorFrom', node)
        if value is not None and 'ProcessorFrom' not in already_processed:
            already_processed.add('ProcessorFrom')
            self.ProcessorFrom = value
        value = find_attr_value_('CommPrimitive', node)
        if value is not None and 'CommPrimitive' not in already_processed:
            already_processed.add('CommPrimitive')
            self.CommPrimitive = value
        value = find_attr_value_('Memory', node)
        if value is not None and 'Memory' not in already_processed:
            already_processed.add('Memory')
            self.Memory = value
        value = find_attr_value_('ProcessorTo', node)
        if value is not None and 'ProcessorTo' not in already_processed:
            already_processed.add('ProcessorTo')
            self.ProcessorTo = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class ChannelMapping


class MappingConstraints(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MappingConstraint=None):
        self.original_tagname_ = None
        if MappingConstraint is None:
            self.MappingConstraint = []
        else:
            self.MappingConstraint = MappingConstraint
    def factory(*args_, **kwargs_):
        if MappingConstraints.subclass:
            return MappingConstraints.subclass(*args_, **kwargs_)
        else:
            return MappingConstraints(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MappingConstraint(self): return self.MappingConstraint
    def set_MappingConstraint(self, MappingConstraint): self.MappingConstraint = MappingConstraint
    def add_MappingConstraint(self, value): self.MappingConstraint.append(value)
    def insert_MappingConstraint_at(self, index, value): self.MappingConstraint.insert(index, value)
    def replace_MappingConstraint_at(self, index, value): self.MappingConstraint[index] = value
    def hasContent_(self):
        if (
            self.MappingConstraint
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='slxMapping:', name_='MappingConstraints', namespacedef_='xmlns:slxMapping="slxMapping"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MappingConstraints')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='slxMapping:', name_='MappingConstraints', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='slxMapping:', name_='MappingConstraints'):
        pass
    def exportChildren(self, outfile, level, namespace_='slxMapping:', name_='MappingConstraints', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for MappingConstraint_ in self.MappingConstraint:
            MappingConstraint_.export(outfile, level, namespace_, name_='MappingConstraint', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MappingConstraint':
            obj_ = MappingConstraint.factory()
            obj_.build(child_)
            self.MappingConstraint.append(obj_)
            obj_.original_tagname_ = 'MappingConstraint'
# end class MappingConstraints


class MappingConstraint(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Process=None, Processor=None):
        self.original_tagname_ = None
        self.Process = _cast(None, Process)
        self.Processor = _cast(None, Processor)
    def factory(*args_, **kwargs_):
        if MappingConstraint.subclass:
            return MappingConstraint.subclass(*args_, **kwargs_)
        else:
            return MappingConstraint(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Process(self): return self.Process
    def set_Process(self, Process): self.Process = Process
    def get_Processor(self): return self.Processor
    def set_Processor(self, Processor): self.Processor = Processor
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='slxMapping:', name_='MappingConstraint', namespacedef_='xmlns:slxMapping="slxMapping"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MappingConstraint')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='slxMapping:', name_='MappingConstraint', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='slxMapping:', name_='MappingConstraint'):
        if self.Process is not None and 'Process' not in already_processed:
            already_processed.add('Process')
            outfile.write(' Process=%s' % (self.gds_format_string(quote_attrib(self.Process).encode(ExternalEncoding), input_name='Process'), ))
        if self.Processor is not None and 'Processor' not in already_processed:
            already_processed.add('Processor')
            outfile.write(' Processor=%s' % (self.gds_format_string(quote_attrib(self.Processor).encode(ExternalEncoding), input_name='Processor'), ))
    def exportChildren(self, outfile, level, namespace_='slxMapping:', name_='MappingConstraint', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Process', node)
        if value is not None and 'Process' not in already_processed:
            already_processed.add('Process')
            self.Process = value
        value = find_attr_value_('Processor', node)
        if value is not None and 'Processor' not in already_processed:
            already_processed.add('Processor')
            self.Processor = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class MappingConstraint


class ProcessPreferences(GeneratedsSuper):
    """List that contains the prefered PEs for each process. This
    information is used for dynamic mapping (grouped or full
    dynamic)"""
    subclass = None
    superclass = None
    def __init__(self, ProcessPreference=None):
        self.original_tagname_ = None
        if ProcessPreference is None:
            self.ProcessPreference = []
        else:
            self.ProcessPreference = ProcessPreference
    def factory(*args_, **kwargs_):
        if ProcessPreferences.subclass:
            return ProcessPreferences.subclass(*args_, **kwargs_)
        else:
            return ProcessPreferences(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ProcessPreference(self): return self.ProcessPreference
    def set_ProcessPreference(self, ProcessPreference): self.ProcessPreference = ProcessPreference
    def add_ProcessPreference(self, value): self.ProcessPreference.append(value)
    def insert_ProcessPreference_at(self, index, value): self.ProcessPreference.insert(index, value)
    def replace_ProcessPreference_at(self, index, value): self.ProcessPreference[index] = value
    def hasContent_(self):
        if (
            self.ProcessPreference
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='slxMapping:', name_='ProcessPreferences', namespacedef_='xmlns:slxMapping="slxMapping"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ProcessPreferences')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='slxMapping:', name_='ProcessPreferences', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='slxMapping:', name_='ProcessPreferences'):
        pass
    def exportChildren(self, outfile, level, namespace_='slxMapping:', name_='ProcessPreferences', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ProcessPreference_ in self.ProcessPreference:
            ProcessPreference_.export(outfile, level, namespace_, name_='ProcessPreference', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ProcessPreference':
            obj_ = ProcessPreference.factory()
            obj_.build(child_)
            self.ProcessPreference.append(obj_)
            obj_.original_tagname_ = 'ProcessPreference'
# end class ProcessPreferences


class ProcessPreference(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Process=None, Processors=None):
        self.original_tagname_ = None
        self.Process = _cast(None, Process)
        self.Processors = _cast(None, Processors)
    def factory(*args_, **kwargs_):
        if ProcessPreference.subclass:
            return ProcessPreference.subclass(*args_, **kwargs_)
        else:
            return ProcessPreference(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Process(self): return self.Process
    def set_Process(self, Process): self.Process = Process
    def get_Processors(self): return self.Processors
    def set_Processors(self, Processors): self.Processors = Processors
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='slxMapping:', name_='ProcessPreference', namespacedef_='xmlns:slxMapping="slxMapping"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ProcessPreference')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='slxMapping:', name_='ProcessPreference', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='slxMapping:', name_='ProcessPreference'):
        if self.Process is not None and 'Process' not in already_processed:
            already_processed.add('Process')
            outfile.write(' Process=%s' % (self.gds_format_string(quote_attrib(self.Process).encode(ExternalEncoding), input_name='Process'), ))
        if self.Processors is not None and 'Processors' not in already_processed:
            already_processed.add('Processors')
            outfile.write(' Processors=%s' % (quote_attrib(self.Processors), ))
    def exportChildren(self, outfile, level, namespace_='slxMapping:', name_='ProcessPreference', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Process', node)
        if value is not None and 'Process' not in already_processed:
            already_processed.add('Process')
            self.Process = value
        value = find_attr_value_('Processors', node)
        if value is not None and 'Processors' not in already_processed:
            already_processed.add('Processors')
            self.Processors = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class ProcessPreference


class BoundList(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, FifoBound=None):
        self.original_tagname_ = None
        if FifoBound is None:
            self.FifoBound = []
        else:
            self.FifoBound = FifoBound
    def factory(*args_, **kwargs_):
        if BoundList.subclass:
            return BoundList.subclass(*args_, **kwargs_)
        else:
            return BoundList(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_FifoBound(self): return self.FifoBound
    def set_FifoBound(self, FifoBound): self.FifoBound = FifoBound
    def add_FifoBound(self, value): self.FifoBound.append(value)
    def insert_FifoBound_at(self, index, value): self.FifoBound.insert(index, value)
    def replace_FifoBound_at(self, index, value): self.FifoBound[index] = value
    def hasContent_(self):
        if (
            self.FifoBound
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='slxMapping:', name_='BoundList', namespacedef_='xmlns:slxMapping="slxMapping"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='BoundList')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='slxMapping:', name_='BoundList', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='slxMapping:', name_='BoundList'):
        pass
    def exportChildren(self, outfile, level, namespace_='slxMapping:', name_='BoundList', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for FifoBound_ in self.FifoBound:
            FifoBound_.export(outfile, level, namespace_, name_='FifoBound', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'FifoBound':
            obj_ = FifoBound.factory()
            obj_.build(child_)
            self.FifoBound.append(obj_)
            obj_.original_tagname_ = 'FifoBound'
# end class BoundList


class FifoBound(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Bound=None, Fifo=None):
        self.original_tagname_ = None
        self.Bound = _cast(int, Bound)
        self.Fifo = _cast(None, Fifo)
    def factory(*args_, **kwargs_):
        if FifoBound.subclass:
            return FifoBound.subclass(*args_, **kwargs_)
        else:
            return FifoBound(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Bound(self): return self.Bound
    def set_Bound(self, Bound): self.Bound = Bound
    def get_Fifo(self): return self.Fifo
    def set_Fifo(self, Fifo): self.Fifo = Fifo
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='slxMapping:', name_='FifoBound', namespacedef_='xmlns:slxMapping="slxMapping"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='FifoBound')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='slxMapping:', name_='FifoBound', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='slxMapping:', name_='FifoBound'):
        if self.Bound is not None and 'Bound' not in already_processed:
            already_processed.add('Bound')
            outfile.write(' Bound="%s"' % self.gds_format_integer(self.Bound, input_name='Bound'))
        if self.Fifo is not None and 'Fifo' not in already_processed:
            already_processed.add('Fifo')
            outfile.write(' Fifo=%s' % (self.gds_format_string(quote_attrib(self.Fifo).encode(ExternalEncoding), input_name='Fifo'), ))
    def exportChildren(self, outfile, level, namespace_='slxMapping:', name_='FifoBound', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Bound', node)
        if value is not None and 'Bound' not in already_processed:
            already_processed.add('Bound')
            try:
                self.Bound = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('Fifo', node)
        if value is not None and 'Fifo' not in already_processed:
            already_processed.add('Fifo')
            self.Fifo = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class FifoBound


class IncrementList(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, BoundIncrement=None):
        self.original_tagname_ = None
        if BoundIncrement is None:
            self.BoundIncrement = []
        else:
            self.BoundIncrement = BoundIncrement
    def factory(*args_, **kwargs_):
        if IncrementList.subclass:
            return IncrementList.subclass(*args_, **kwargs_)
        else:
            return IncrementList(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_BoundIncrement(self): return self.BoundIncrement
    def set_BoundIncrement(self, BoundIncrement): self.BoundIncrement = BoundIncrement
    def add_BoundIncrement(self, value): self.BoundIncrement.append(value)
    def insert_BoundIncrement_at(self, index, value): self.BoundIncrement.insert(index, value)
    def replace_BoundIncrement_at(self, index, value): self.BoundIncrement[index] = value
    def hasContent_(self):
        if (
            self.BoundIncrement
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='slxMapping:', name_='IncrementList', namespacedef_='xmlns:slxMapping="slxMapping"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='IncrementList')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='slxMapping:', name_='IncrementList', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='slxMapping:', name_='IncrementList'):
        pass
    def exportChildren(self, outfile, level, namespace_='slxMapping:', name_='IncrementList', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for BoundIncrement_ in self.BoundIncrement:
            BoundIncrement_.export(outfile, level, namespace_, name_='BoundIncrement', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'BoundIncrement':
            obj_ = BoundIncrement.factory()
            obj_.build(child_)
            self.BoundIncrement.append(obj_)
            obj_.original_tagname_ = 'BoundIncrement'
# end class IncrementList


class BoundIncrement(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Increment=None, Fifo=None):
        self.original_tagname_ = None
        self.Increment = _cast(int, Increment)
        self.Fifo = _cast(None, Fifo)
    def factory(*args_, **kwargs_):
        if BoundIncrement.subclass:
            return BoundIncrement.subclass(*args_, **kwargs_)
        else:
            return BoundIncrement(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Increment(self): return self.Increment
    def set_Increment(self, Increment): self.Increment = Increment
    def get_Fifo(self): return self.Fifo
    def set_Fifo(self, Fifo): self.Fifo = Fifo
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='slxMapping:', name_='BoundIncrement', namespacedef_='xmlns:slxMapping="slxMapping"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='BoundIncrement')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='slxMapping:', name_='BoundIncrement', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='slxMapping:', name_='BoundIncrement'):
        if self.Increment is not None and 'Increment' not in already_processed:
            already_processed.add('Increment')
            outfile.write(' Increment="%s"' % self.gds_format_integer(self.Increment, input_name='Increment'))
        if self.Fifo is not None and 'Fifo' not in already_processed:
            already_processed.add('Fifo')
            outfile.write(' Fifo=%s' % (self.gds_format_string(quote_attrib(self.Fifo).encode(ExternalEncoding), input_name='Fifo'), ))
    def exportChildren(self, outfile, level, namespace_='slxMapping:', name_='BoundIncrement', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Increment', node)
        if value is not None and 'Increment' not in already_processed:
            already_processed.add('Increment')
            try:
                self.Increment = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('Fifo', node)
        if value is not None and 'Fifo' not in already_processed:
            already_processed.add('Fifo')
            self.Fifo = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class BoundIncrement


class SlxMapperConfiguration(GeneratedsSuper):
    """Configuration for the SLX mapper."""
    subclass = None
    superclass = None
    def __init__(self, BoundingConfiguration=None, SchedulingConfiguration=None, MappingConfiguration=None, SimulationParameters=None):
        self.original_tagname_ = None
        self.BoundingConfiguration = BoundingConfiguration
        self.SchedulingConfiguration = SchedulingConfiguration
        self.MappingConfiguration = MappingConfiguration
        self.SimulationParameters = SimulationParameters
    def factory(*args_, **kwargs_):
        if SlxMapperConfiguration.subclass:
            return SlxMapperConfiguration.subclass(*args_, **kwargs_)
        else:
            return SlxMapperConfiguration(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_BoundingConfiguration(self): return self.BoundingConfiguration
    def set_BoundingConfiguration(self, BoundingConfiguration): self.BoundingConfiguration = BoundingConfiguration
    def get_SchedulingConfiguration(self): return self.SchedulingConfiguration
    def set_SchedulingConfiguration(self, SchedulingConfiguration): self.SchedulingConfiguration = SchedulingConfiguration
    def get_MappingConfiguration(self): return self.MappingConfiguration
    def set_MappingConfiguration(self, MappingConfiguration): self.MappingConfiguration = MappingConfiguration
    def get_SimulationParameters(self): return self.SimulationParameters
    def set_SimulationParameters(self, SimulationParameters): self.SimulationParameters = SimulationParameters
    def hasContent_(self):
        if (
            self.BoundingConfiguration is not None or
            self.SchedulingConfiguration is not None or
            self.MappingConfiguration is not None or
            self.SimulationParameters is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='slxMapping:', name_='SlxMapperConfiguration', namespacedef_='xmlns:slxMapping="slxMapping" xmlns:slxMapper="slxMapper" ', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SlxMapperConfiguration')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='slxMapping:', name_='SlxMapperConfiguration', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='slxMapping:', name_='SlxMapperConfiguration'):
        pass
    def exportChildren(self, outfile, level, namespace_='slxMapping:', name_='SlxMapperConfiguration', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BoundingConfiguration is not None:
            self.BoundingConfiguration.export(outfile, level, namespace_, name_='BoundingConfiguration', pretty_print=pretty_print)
        if self.SchedulingConfiguration is not None:
            self.SchedulingConfiguration.export(outfile, level, namespace_, name_='SchedulingConfiguration', pretty_print=pretty_print)
        if self.MappingConfiguration is not None:
            self.MappingConfiguration.export(outfile, level, namespace_, name_='MappingConfiguration', pretty_print=pretty_print)
        if self.SimulationParameters is not None:
            self.SimulationParameters.export(outfile, level, namespace_, name_='SimulationParameters', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'BoundingConfiguration':
            obj_ = BoundingConfiguration.factory()
            obj_.build(child_)
            self.BoundingConfiguration = obj_
            obj_.original_tagname_ = 'BoundingConfiguration'
        elif nodeName_ == 'SchedulingConfiguration':
            obj_ = SchedulingConfiguration.factory()
            obj_.build(child_)
            self.SchedulingConfiguration = obj_
            obj_.original_tagname_ = 'SchedulingConfiguration'
        elif nodeName_ == 'MappingConfiguration':
            obj_ = MappingConfiguration.factory()
            obj_.build(child_)
            self.MappingConfiguration = obj_
            obj_.original_tagname_ = 'MappingConfiguration'
        elif nodeName_ == 'SimulationParameters':
            obj_ = SimulationParameters.factory()
            obj_.build(child_)
            self.SimulationParameters = obj_
            obj_.original_tagname_ = 'SimulationParameters'
# end class SlxMapperConfiguration


class BoundingConfiguration(GeneratedsSuper):
    """Defines how to compute channel bounds."""
    subclass = None
    superclass = None
    def __init__(self, BoundingAlgorithm=None, BoundingIncrement=None, BoundingAdditionalParameters=None):
        self.original_tagname_ = None
        self.BoundingAlgorithm = BoundingAlgorithm
        self.validate_BoundingAlgorithm(self.BoundingAlgorithm)
        self.BoundingIncrement = BoundingIncrement
        self.BoundingAdditionalParameters = BoundingAdditionalParameters
    def factory(*args_, **kwargs_):
        if BoundingConfiguration.subclass:
            return BoundingConfiguration.subclass(*args_, **kwargs_)
        else:
            return BoundingConfiguration(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_BoundingAlgorithm(self): return self.BoundingAlgorithm
    def set_BoundingAlgorithm(self, BoundingAlgorithm): self.BoundingAlgorithm = BoundingAlgorithm
    def get_BoundingIncrement(self): return self.BoundingIncrement
    def set_BoundingIncrement(self, BoundingIncrement): self.BoundingIncrement = BoundingIncrement
    def get_BoundingAdditionalParameters(self): return self.BoundingAdditionalParameters
    def set_BoundingAdditionalParameters(self, BoundingAdditionalParameters): self.BoundingAdditionalParameters = BoundingAdditionalParameters
    def validate_BoundingAlgorithm(self, value):
        # Validate type BoundingAlgorithm, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['Simulate', 'TrafficRatio', 'TraceAnalysis']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on BoundingAlgorithm' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.BoundingAlgorithm is not None or
            self.BoundingIncrement is not None or
            self.BoundingAdditionalParameters is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='slxMapping:', name_='BoundingConfiguration', namespacedef_='xmlns:slxMapping="slxMapping" xmlns:slxMapper="slxMapper" ', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='BoundingConfiguration')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='slxMapping:', name_='BoundingConfiguration', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='slxMapping:', name_='BoundingConfiguration'):
        pass
    def exportChildren(self, outfile, level, namespace_='slxMapping:', name_='BoundingConfiguration', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BoundingAlgorithm is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBoundingAlgorithm>%s</%sBoundingAlgorithm>%s' % (namespace_, self.gds_format_string(quote_xml(self.BoundingAlgorithm).encode(ExternalEncoding), input_name='BoundingAlgorithm'), namespace_, eol_))
        if self.BoundingIncrement is not None:
            self.BoundingIncrement.export(outfile, level, namespace_, name_='BoundingIncrement', pretty_print=pretty_print)
        if self.BoundingAdditionalParameters is not None:
            self.BoundingAdditionalParameters.export(outfile, level, namespace_, name_='BoundingAdditionalParameters', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'BoundingAlgorithm':
            BoundingAlgorithm_ = child_.text
            BoundingAlgorithm_ = self.gds_validate_string(BoundingAlgorithm_, node, 'BoundingAlgorithm')
            self.BoundingAlgorithm = BoundingAlgorithm_
            # validate type BoundingAlgorithm
            self.validate_BoundingAlgorithm(self.BoundingAlgorithm)
        elif nodeName_ == 'BoundingIncrement':
            obj_ = BoundingIncrement.factory()
            obj_.build(child_)
            self.BoundingIncrement = obj_
            obj_.original_tagname_ = 'BoundingIncrement'
        elif nodeName_ == 'BoundingAdditionalParameters':
            obj_ = BoundingAdditionalParameters.factory()
            obj_.build(child_)
            self.BoundingAdditionalParameters = obj_
            obj_.original_tagname_ = 'BoundingAdditionalParameters'
# end class BoundingConfiguration


class BoundingIncrement(GeneratedsSuper):
    """Algorithm used to iterate by incrementing the buffer sizes, in order
    to trade off memory and speed."""
    subclass = None
    superclass = None
    def __init__(self, BoundingIncrementAlgorithm='Uniform', MaxSteps=1):
        self.original_tagname_ = None
        self.BoundingIncrementAlgorithm = BoundingIncrementAlgorithm
        self.validate_BoundingIncrementAlgorithm(self.BoundingIncrementAlgorithm)
        self.MaxSteps = MaxSteps
    def factory(*args_, **kwargs_):
        if BoundingIncrement.subclass:
            return BoundingIncrement.subclass(*args_, **kwargs_)
        else:
            return BoundingIncrement(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_BoundingIncrementAlgorithm(self): return self.BoundingIncrementAlgorithm
    def set_BoundingIncrementAlgorithm(self, BoundingIncrementAlgorithm): self.BoundingIncrementAlgorithm = BoundingIncrementAlgorithm
    def get_MaxSteps(self): return self.MaxSteps
    def set_MaxSteps(self, MaxSteps): self.MaxSteps = MaxSteps
    def validate_BoundingIncrementAlgorithm(self, value):
        # Validate type BoundingIncrementAlgorithm, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['Uniform', 'Proportional', 'Targeted']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on BoundingIncrementAlgorithm' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.BoundingIncrementAlgorithm != "Uniform" or
            self.MaxSteps != 1
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='slxMapping:', name_='BoundingIncrement', namespacedef_='xmlns:slxMapping="slxMapping" xmlns:slxMapper="slxMapper" ', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='BoundingIncrement')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='slxMapping:', name_='BoundingIncrement', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='slxMapping:', name_='BoundingIncrement'):
        pass
    def exportChildren(self, outfile, level, namespace_='slxMapping:', name_='BoundingIncrement', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BoundingIncrementAlgorithm != "Uniform":
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBoundingIncrementAlgorithm>%s</%sBoundingIncrementAlgorithm>%s' % (namespace_, self.gds_format_string(quote_xml(self.BoundingIncrementAlgorithm).encode(ExternalEncoding), input_name='BoundingIncrementAlgorithm'), namespace_, eol_))
        if self.MaxSteps != 1:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMaxSteps>%s</%sMaxSteps>%s' % (namespace_, self.gds_format_integer(self.MaxSteps, input_name='MaxSteps'), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'BoundingIncrementAlgorithm':
            BoundingIncrementAlgorithm_ = child_.text
            BoundingIncrementAlgorithm_ = self.gds_validate_string(BoundingIncrementAlgorithm_, node, 'BoundingIncrementAlgorithm')
            self.BoundingIncrementAlgorithm = BoundingIncrementAlgorithm_
            # validate type BoundingIncrementAlgorithm
            self.validate_BoundingIncrementAlgorithm(self.BoundingIncrementAlgorithm)
        elif nodeName_ == 'MaxSteps':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'MaxSteps')
            self.MaxSteps = ival_
# end class BoundingIncrement


class BoundingAdditionalParameters(GeneratedsSuper):
    """Parameters for different bounding algorithms."""
    subclass = None
    superclass = None
    def __init__(self, BoundingFactor=None):
        self.original_tagname_ = None
        self.BoundingFactor = BoundingFactor
    def factory(*args_, **kwargs_):
        if BoundingAdditionalParameters.subclass:
            return BoundingAdditionalParameters.subclass(*args_, **kwargs_)
        else:
            return BoundingAdditionalParameters(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_BoundingFactor(self): return self.BoundingFactor
    def set_BoundingFactor(self, BoundingFactor): self.BoundingFactor = BoundingFactor
    def hasContent_(self):
        if (
            self.BoundingFactor is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='slxMapping:', name_='BoundingAdditionalParameters', namespacedef_='xmlns:slxMapping="slxMapping"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='BoundingAdditionalParameters')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='slxMapping:', name_='BoundingAdditionalParameters', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='slxMapping:', name_='BoundingAdditionalParameters'):
        pass
    def exportChildren(self, outfile, level, namespace_='slxMapping:', name_='BoundingAdditionalParameters', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BoundingFactor is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBoundingFactor>%s</%sBoundingFactor>%s' % (namespace_, self.gds_format_float(self.BoundingFactor, input_name='BoundingFactor'), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'BoundingFactor':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'BoundingFactor')
            self.BoundingFactor = fval_
# end class BoundingAdditionalParameters


class SchedulingConfiguration(GeneratedsSuper):
    """Configuration for the scheduling."""
    subclass = None
    superclass = None
    def __init__(self, SchedulingPolicy=None, SchedulingTimeSlot=None, SchedulingPriorities=None, SchedulingAdditionalParameters=None):
        self.original_tagname_ = None
        self.SchedulingPolicy = SchedulingPolicy
        self.validate_SchedulingPolicy(self.SchedulingPolicy)
        self.SchedulingTimeSlot = SchedulingTimeSlot
        self.SchedulingPriorities = SchedulingPriorities
        self.validate_SchedulingPriorities(self.SchedulingPriorities)
        self.SchedulingAdditionalParameters = SchedulingAdditionalParameters
    def factory(*args_, **kwargs_):
        if SchedulingConfiguration.subclass:
            return SchedulingConfiguration.subclass(*args_, **kwargs_)
        else:
            return SchedulingConfiguration(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SchedulingPolicy(self): return self.SchedulingPolicy
    def set_SchedulingPolicy(self, SchedulingPolicy): self.SchedulingPolicy = SchedulingPolicy
    def get_SchedulingTimeSlot(self): return self.SchedulingTimeSlot
    def set_SchedulingTimeSlot(self, SchedulingTimeSlot): self.SchedulingTimeSlot = SchedulingTimeSlot
    def get_SchedulingPriorities(self): return self.SchedulingPriorities
    def set_SchedulingPriorities(self, SchedulingPriorities): self.SchedulingPriorities = SchedulingPriorities
    def get_SchedulingAdditionalParameters(self): return self.SchedulingAdditionalParameters
    def set_SchedulingAdditionalParameters(self, SchedulingAdditionalParameters): self.SchedulingAdditionalParameters = SchedulingAdditionalParameters
    def validate_SchedulingPolicy(self, value):
        # Validate type SchedulingPolicy, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['FIFO', 'Priority', 'RoundRobinFixed', 'RoundRobinDynamic']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on SchedulingPolicy' % {"value" : value.encode("utf-8")} )
    def validate_SchedulingPriorities(self, value):
        # Validate type SchedulingPriorities, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['TopologyBased', 'TimeBased', 'OutputRate', 'ExecutionRate', 'WeightedOutputRate']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on SchedulingPriorities' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.SchedulingPolicy is not None or
            self.SchedulingTimeSlot is not None or
            self.SchedulingPriorities is not None or
            self.SchedulingAdditionalParameters is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='slxMapping:', name_='SchedulingConfiguration', namespacedef_='xmlns:slxMapping="slxMapping" xmlns:slxMapper="slxMapper" ', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SchedulingConfiguration')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='slxMapping:', name_='SchedulingConfiguration', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='slxMapping:', name_='SchedulingConfiguration'):
        pass
    def exportChildren(self, outfile, level, namespace_='slxMapping:', name_='SchedulingConfiguration', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SchedulingPolicy is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSchedulingPolicy>%s</%sSchedulingPolicy>%s' % (namespace_, self.gds_format_string(quote_xml(self.SchedulingPolicy).encode(ExternalEncoding), input_name='SchedulingPolicy'), namespace_, eol_))
        if self.SchedulingTimeSlot is not None:
            self.SchedulingTimeSlot.export(outfile, level, namespace_, name_='SchedulingTimeSlot', pretty_print=pretty_print)
        if self.SchedulingPriorities is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSchedulingPriorities>%s</%sSchedulingPriorities>%s' % (namespace_, self.gds_format_string(quote_xml(self.SchedulingPriorities).encode(ExternalEncoding), input_name='SchedulingPriorities'), namespace_, eol_))
        if self.SchedulingAdditionalParameters is not None:
            self.SchedulingAdditionalParameters.export(outfile, level, namespace_, name_='SchedulingAdditionalParameters', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SchedulingPolicy':
            SchedulingPolicy_ = child_.text
            SchedulingPolicy_ = self.gds_validate_string(SchedulingPolicy_, node, 'SchedulingPolicy')
            self.SchedulingPolicy = SchedulingPolicy_
            # validate type SchedulingPolicy
            self.validate_SchedulingPolicy(self.SchedulingPolicy)
        elif nodeName_ == 'SchedulingTimeSlot':
            obj_ = TimeScale.factory()
            obj_.build(child_)
            self.SchedulingTimeSlot = obj_
            obj_.original_tagname_ = 'SchedulingTimeSlot'
        elif nodeName_ == 'SchedulingPriorities':
            SchedulingPriorities_ = child_.text
            SchedulingPriorities_ = self.gds_validate_string(SchedulingPriorities_, node, 'SchedulingPriorities')
            self.SchedulingPriorities = SchedulingPriorities_
            # validate type SchedulingPriorities
            self.validate_SchedulingPriorities(self.SchedulingPriorities)
        elif nodeName_ == 'SchedulingAdditionalParameters':
            obj_ = SchedulingAdditionalParameters.factory()
            obj_.build(child_)
            self.SchedulingAdditionalParameters = obj_
            obj_.original_tagname_ = 'SchedulingAdditionalParameters'
# end class SchedulingConfiguration


class TimeScale(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Value=None, Scale=None):
        self.original_tagname_ = None
        self.Value = Value
        self.Scale = Scale
        self.validate_TimeScaleType(self.Scale)
    def factory(*args_, **kwargs_):
        if TimeScale.subclass:
            return TimeScale.subclass(*args_, **kwargs_)
        else:
            return TimeScale(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def get_Scale(self): return self.Scale
    def set_Scale(self, Scale): self.Scale = Scale
    def validate_TimeScaleType(self, value):
        # Validate type TimeScaleType, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['ps', 'ns', 'us', 'ms', 's', 'min', 'h']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TimeScaleType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Value is not None or
            self.Scale is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='slxMapping:', name_='TimeScale', namespacedef_='xmlns:slxMapping="slxMapping" xmlns:slxMapper="slxMapper" ', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TimeScale')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='slxMapping:', name_='TimeScale', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='slxMapping:', name_='TimeScale'):
        pass
    def exportChildren(self, outfile, level, namespace_='slxMapping:', name_='TimeScale', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValue>%s</%sValue>%s' % (namespace_, self.gds_format_float(self.Value, input_name='Value'), namespace_, eol_))
        if self.Scale is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sScale>%s</%sScale>%s' % (namespace_, self.gds_format_string(quote_xml(self.Scale).encode(ExternalEncoding), input_name='Scale'), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Value':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Value')
            self.Value = fval_
        elif nodeName_ == 'Scale':
            Scale_ = child_.text
            Scale_ = self.gds_validate_string(Scale_, node, 'Scale')
            self.Scale = Scale_
            # validate type TimeScaleType
            self.validate_TimeScaleType(self.Scale)
# end class TimeScale


class SchedulingAdditionalParameters(GeneratedsSuper):
    """Parameters for different algorithms."""
    subclass = None
    superclass = None
    def __init__(self, TimeSlotFactor=None, TopologyHeuristic=None):
        self.original_tagname_ = None
        self.TimeSlotFactor = TimeSlotFactor
        self.TopologyHeuristic = TopologyHeuristic
        self.validate_TopologyHeuristic(self.TopologyHeuristic)
    def factory(*args_, **kwargs_):
        if SchedulingAdditionalParameters.subclass:
            return SchedulingAdditionalParameters.subclass(*args_, **kwargs_)
        else:
            return SchedulingAdditionalParameters(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TimeSlotFactor(self): return self.TimeSlotFactor
    def set_TimeSlotFactor(self, TimeSlotFactor): self.TimeSlotFactor = TimeSlotFactor
    def get_TopologyHeuristic(self): return self.TopologyHeuristic
    def set_TopologyHeuristic(self, TopologyHeuristic): self.TopologyHeuristic = TopologyHeuristic
    def validate_TopologyHeuristic(self, value):
        # Validate type TopologyHeuristic, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['fanStaticIn', 'fanStaticOut', 'fanDynamicIn', 'fanDynamicOut', 'DepthAscending', 'DepthDescending']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TopologyHeuristic' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.TimeSlotFactor is not None or
            self.TopologyHeuristic is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='slxMapping:', name_='SchedulingAdditionalParameters', namespacedef_='xmlns:slxMapping="slxMapping" xmlns:slxMapper="slxMapper" ', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SchedulingAdditionalParameters')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='slxMapping:', name_='SchedulingAdditionalParameters', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='slxMapping:', name_='SchedulingAdditionalParameters'):
        pass
    def exportChildren(self, outfile, level, namespace_='slxMapping:', name_='SchedulingAdditionalParameters', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TimeSlotFactor is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTimeSlotFactor>%s</%sTimeSlotFactor>%s' % (namespace_, self.gds_format_float(self.TimeSlotFactor, input_name='TimeSlotFactor'), namespace_, eol_))
        if self.TopologyHeuristic is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTopologyHeuristic>%s</%sTopologyHeuristic>%s' % (namespace_, self.gds_format_string(quote_xml(self.TopologyHeuristic).encode(ExternalEncoding), input_name='TopologyHeuristic'), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TimeSlotFactor':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'TimeSlotFactor')
            self.TimeSlotFactor = fval_
        elif nodeName_ == 'TopologyHeuristic':
            TopologyHeuristic_ = child_.text
            TopologyHeuristic_ = self.gds_validate_string(TopologyHeuristic_, node, 'TopologyHeuristic')
            self.TopologyHeuristic = TopologyHeuristic_
            # validate type TopologyHeuristic
            self.validate_TopologyHeuristic(self.TopologyHeuristic)
# end class SchedulingAdditionalParameters


class MappingConfiguration(GeneratedsSuper):
    """Define how to search for the best mapping independently of the
    scheduler."""
    subclass = None
    superclass = None
    def __init__(self, MappingType=None, MappingAlgorithm=None, MappingAdditionalParameters=None):
        self.original_tagname_ = None
        self.MappingType = MappingType
        self.validate_MappingType(self.MappingType)
        self.MappingAlgorithm = MappingAlgorithm
        self.validate_MappingAlgorithm(self.MappingAlgorithm)
        self.MappingAdditionalParameters = MappingAdditionalParameters
    def factory(*args_, **kwargs_):
        if MappingConfiguration.subclass:
            return MappingConfiguration.subclass(*args_, **kwargs_)
        else:
            return MappingConfiguration(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MappingType(self): return self.MappingType
    def set_MappingType(self, MappingType): self.MappingType = MappingType
    def get_MappingAlgorithm(self): return self.MappingAlgorithm
    def set_MappingAlgorithm(self, MappingAlgorithm): self.MappingAlgorithm = MappingAlgorithm
    def get_MappingAdditionalParameters(self): return self.MappingAdditionalParameters
    def set_MappingAdditionalParameters(self, MappingAdditionalParameters): self.MappingAdditionalParameters = MappingAdditionalParameters
    def validate_MappingType(self, value):
        # Validate type MappingType, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['Static']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on MappingType' % {"value" : value.encode("utf-8")} )
    def validate_MappingAlgorithm(self, value):
        # Validate type MappingAlgorithm, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['Affinity', 'LoadBalancer', 'Throughput', 'RandomWalk', 'SimulateMapping', 'BestEffort']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on MappingAlgorithm' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.MappingType is not None or
            self.MappingAlgorithm is not None or
            self.MappingAdditionalParameters is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='slxMapping:', name_='MappingConfiguration', namespacedef_='xmlns:slxMapping="slxMapping" xmlns:slxMapper="slxMapper" ', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MappingConfiguration')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='slxMapping:', name_='MappingConfiguration', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='slxMapping:', name_='MappingConfiguration'):
        pass
    def exportChildren(self, outfile, level, namespace_='slxMapping:', name_='MappingConfiguration', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MappingType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMappingType>%s</%sMappingType>%s' % (namespace_, self.gds_format_string(quote_xml(self.MappingType).encode(ExternalEncoding), input_name='MappingType'), namespace_, eol_))
        if self.MappingAlgorithm is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMappingAlgorithm>%s</%sMappingAlgorithm>%s' % (namespace_, self.gds_format_string(quote_xml(self.MappingAlgorithm).encode(ExternalEncoding), input_name='MappingAlgorithm'), namespace_, eol_))
        if self.MappingAdditionalParameters is not None:
            self.MappingAdditionalParameters.export(outfile, level, namespace_, name_='MappingAdditionalParameters', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MappingType':
            MappingType_ = child_.text
            MappingType_ = self.gds_validate_string(MappingType_, node, 'MappingType')
            self.MappingType = MappingType_
            # validate type MappingType
            self.validate_MappingType(self.MappingType)
        elif nodeName_ == 'MappingAlgorithm':
            MappingAlgorithm_ = child_.text
            MappingAlgorithm_ = self.gds_validate_string(MappingAlgorithm_, node, 'MappingAlgorithm')
            self.MappingAlgorithm = MappingAlgorithm_
            # validate type MappingAlgorithm
            self.validate_MappingAlgorithm(self.MappingAlgorithm)
        elif nodeName_ == 'MappingAdditionalParameters':
            obj_ = MappingAdditionalParameters.factory()
            obj_.build(child_)
            self.MappingAdditionalParameters = obj_
            obj_.original_tagname_ = 'MappingAdditionalParameters'
# end class MappingConfiguration


class MappingAdditionalParameters(GeneratedsSuper):
    """Parameters for different mapper algorithms."""
    subclass = None
    superclass = None
    def __init__(self, RandomTrials=None):
        self.original_tagname_ = None
        self.RandomTrials = RandomTrials
    def factory(*args_, **kwargs_):
        if MappingAdditionalParameters.subclass:
            return MappingAdditionalParameters.subclass(*args_, **kwargs_)
        else:
            return MappingAdditionalParameters(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_RandomTrials(self): return self.RandomTrials
    def set_RandomTrials(self, RandomTrials): self.RandomTrials = RandomTrials
    def hasContent_(self):
        if (
            self.RandomTrials is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='slxMapping:', name_='MappingAdditionalParameters', namespacedef_='xmlns:slxMapping="slxMapping"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MappingAdditionalParameters')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='slxMapping:', name_='MappingAdditionalParameters', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='slxMapping:', name_='MappingAdditionalParameters'):
        pass
    def exportChildren(self, outfile, level, namespace_='slxMapping:', name_='MappingAdditionalParameters', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RandomTrials is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRandomTrials>%s</%sRandomTrials>%s' % (namespace_, self.gds_format_integer(self.RandomTrials, input_name='RandomTrials'), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'RandomTrials':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'RandomTrials')
            self.RandomTrials = ival_
# end class MappingAdditionalParameters


class SimulationParameters(GeneratedsSuper):
    """Define the simulation behavior."""
    subclass = None
    superclass = None
    def __init__(self, ModelCommunication=None, ModelContextSwitches=None):
        self.original_tagname_ = None
        self.ModelCommunication = ModelCommunication
        self.ModelContextSwitches = ModelContextSwitches
    def factory(*args_, **kwargs_):
        if SimulationParameters.subclass:
            return SimulationParameters.subclass(*args_, **kwargs_)
        else:
            return SimulationParameters(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ModelCommunication(self): return self.ModelCommunication
    def set_ModelCommunication(self, ModelCommunication): self.ModelCommunication = ModelCommunication
    def get_ModelContextSwitches(self): return self.ModelContextSwitches
    def set_ModelContextSwitches(self, ModelContextSwitches): self.ModelContextSwitches = ModelContextSwitches
    def hasContent_(self):
        if (
            self.ModelCommunication is not None or
            self.ModelContextSwitches is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='slxMapping:', name_='SimulationParameters', namespacedef_='xmlns:slxMapping="slxMapping"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SimulationParameters')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='slxMapping:', name_='SimulationParameters', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='slxMapping:', name_='SimulationParameters'):
        pass
    def exportChildren(self, outfile, level, namespace_='slxMapping:', name_='SimulationParameters', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ModelCommunication is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sModelCommunication>%s</%sModelCommunication>%s' % (namespace_, self.gds_format_boolean(self.ModelCommunication, input_name='ModelCommunication'), namespace_, eol_))
        if self.ModelContextSwitches is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sModelContextSwitches>%s</%sModelContextSwitches>%s' % (namespace_, self.gds_format_boolean(self.ModelContextSwitches, input_name='ModelContextSwitches'), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ModelCommunication':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'ModelCommunication')
            self.ModelCommunication = ival_
        elif nodeName_ == 'ModelContextSwitches':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'ModelContextSwitches')
            self.ModelContextSwitches = ival_
# end class SimulationParameters


GDSClassesMapping = {
    'Process': ProcessAttribute,
    'SchedulingTimeSlot': TimeScale,
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'SlxMappingDescriptor'
        rootClass = SlxMappingDescriptor
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='xmlns:slxMapping="slxMapping"',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'SlxMappingDescriptor'
        rootClass = SlxMappingDescriptor
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    from StringIO import StringIO
    parser = None
    doc = parsexml_(StringIO(inString), parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'SlxMappingDescriptor'
        rootClass = SlxMappingDescriptor
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='xmlns:slxMapping="slxMapping"')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'SlxMappingDescriptor'
        rootClass = SlxMappingDescriptor
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from slxmapping import *\n\n')
        sys.stdout.write('import slxmapping as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "AdditionalDesc",
    "AttributedProcesses",
    "BoundIncrement",
    "BoundInfo",
    "BoundList",
    "BoundingAdditionalParameters",
    "BoundingConfiguration",
    "BoundingIncrement",
    "ChannelMapping",
    "ChannelMappings",
    "FifoBound",
    "GroupID2PEIDs",
    "IncrementList",
    "IterationCount",
    "IterationCounts",
    "MapperDesc",
    "MappingAdditionalParameters",
    "MappingConfiguration",
    "MappingConstraint",
    "MappingConstraints",
    "OutMapperInfo",
    "OutSchedulerInfo",
    "PeGroup",
    "ProcessAttribute",
    "ProcessPreference",
    "ProcessPreferences",
    "Scheduler2Group",
    "Schedulers2Groups",
    "SchedulingAdditionalParameters",
    "SchedulingConfiguration",
    "SimulationParameters",
    "SingleSchedulerDesc",
    "SlxMapperConfiguration",
    "SlxMappingDescriptor",
    "TimeScale"
]
